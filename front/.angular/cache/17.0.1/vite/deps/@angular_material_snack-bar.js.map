{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/platform/platform.ts", "../../../../../../../src/cdk/platform/platform-module.ts", "../../../../../../../src/cdk/platform/features/input-types.ts", "../../../../../../../src/cdk/platform/features/passive-listeners.ts", "../../../../../../../src/cdk/platform/features/scrolling.ts", "../../../../../../../src/cdk/platform/features/shadow-dom.ts", "../../../../../../../src/cdk/platform/features/test-environment.ts", "../../../../../../../src/cdk/platform/platform_public_index.ts", "../../../../../../../src/cdk/keycodes/keycodes.ts", "../../../../../../../src/cdk/keycodes/modifiers.ts", "../../../../../../../src/cdk/keycodes/keycodes_public_index.ts", "../../../../../../../src/cdk/coercion/boolean-property.ts", "../../../../../../../src/cdk/coercion/number-property.ts", "../../../../../../../src/cdk/coercion/array.ts", "../../../../../../../src/cdk/coercion/css-pixel-value.ts", "../../../../../../../src/cdk/coercion/element.ts", "../../../../../../../src/cdk/coercion/string-array.ts", "../../../../../../../src/cdk/observers/observe-content.ts", "../../../../../../../src/cdk/observers/observers_public_index.ts", "../../../../../../../src/cdk/layout/layout-module.ts", "../../../../../../../src/cdk/layout/media-matcher.ts", "../../../../../../../src/cdk/layout/breakpoints-observer.ts", "../../../../../../../src/cdk/layout/breakpoints.ts", "../../../../../../../src/cdk/layout/layout_public_index.ts", "../../../../../../../src/cdk/a11y/aria-describer/aria-reference.ts", "../../../../../../../src/cdk/a11y/aria-describer/aria-describer.ts", "../../../../../../../src/cdk/a11y/key-manager/list-key-manager.ts", "../../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts", "../../../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts", "../../../../../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap.ts", "../../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts", "../../../../../../../src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap-manager.ts", "../../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts", "../../../../../../../src/cdk/a11y/fake-event-detection.ts", "../../../../../../../src/cdk/a11y/input-modality/input-modality-detector.ts", "../../../../../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts", "../../../../../../../src/cdk/a11y/live-announcer/live-announcer.ts", "../../../../../../../src/cdk/a11y/focus-monitor/focus-monitor.ts", "../../../../../../../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts", "../../../../../../../src/cdk/a11y/a11y-module.ts", "../../../../../../../src/cdk/a11y/a11y_public_index.ts", "../../../../../../../src/cdk/bidi/dir-document-token.ts", "../../../../../../../src/cdk/bidi/directionality.ts", "../../../../../../../src/cdk/bidi/dir.ts", "../../../../../../../src/cdk/bidi/bidi-module.ts", "../../../../../../../src/cdk/bidi/bidi_public_index.ts", "../../../../../../../src/cdk/version.ts", "../../../../../../../src/material/core/version.ts", "../../../../../../../src/material/core/animation/animation.ts", "../../../../../../../src/material/core/common-behaviors/common-module.ts", "../../../../../../../src/material/core/common-behaviors/disabled.ts", "../../../../../../../src/material/core/common-behaviors/color.ts", "../../../../../../../src/material/core/common-behaviors/disable-ripple.ts", "../../../../../../../src/material/core/common-behaviors/tabindex.ts", "../../../../../../../src/material/core/common-behaviors/error-state.ts", "../../../../../../../src/material/core/common-behaviors/initialized.ts", "../../../../../../../src/material/core/datetime/date-adapter.ts", "../../../../../../../src/material/core/datetime/date-formats.ts", "../../../../../../../src/material/core/datetime/native-date-adapter.ts", "../../../../../../../src/material/core/datetime/native-date-formats.ts", "../../../../../../../src/material/core/datetime/index.ts", "../../../../../../../src/material/core/error/error-options.ts", "../../../../../../../src/material/core/line/line.ts", "../../../../../../../src/material/core/ripple/ripple-ref.ts", "../../../../../../../src/material/core/ripple/ripple-event-manager.ts", "../../../../../../../src/material/core/ripple/ripple-renderer.ts", "../../../../../../../src/material/core/ripple/ripple.ts", "../../../../../../../src/material/core/ripple/index.ts", "../../../../../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts", "../../../../../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox-module.ts", "../../../../../../../src/material/core/option/option-parent.ts", "../../../../../../../src/material/core/option/optgroup.ts", "../../../../../../../src/material/core/option/optgroup.html", "../../../../../../../src/material/core/option/option.ts", "../../../../../../../src/material/core/option/option.html", "../../../../../../../src/material/core/option/index.ts", "../../../../../../../src/material/core/private/ripple-loader.ts", "../../../../../../../src/material/core/core_public_index.ts", "../../../../../../../src/material/button/button-base.ts", "../../../../../../../src/material/button/button.ts", "../../../../../../../src/material/button/button.html", "../../../../../../../src/material/button/fab.ts", "../../../../../../../src/material/button/icon-button.ts", "../../../../../../../src/material/button/icon-button.html", "../../../../../../../src/material/button/module.ts", "../../../../../../../src/material/button/button_public_index.ts", "../../../../../../../src/cdk/portal/portal-errors.ts", "../../../../../../../src/cdk/portal/portal.ts", "../../../../../../../src/cdk/portal/dom-portal-outlet.ts", "../../../../../../../src/cdk/portal/portal-directives.ts", "../../../../../../../src/cdk/portal/portal-injector.ts", "../../../../../../../src/cdk/portal/portal_public_index.ts", "../../../../../../../src/cdk/collections/data-source.ts", "../../../../../../../src/cdk/collections/array-data-source.ts", "../../../../../../../src/cdk/collections/dispose-view-repeater-strategy.ts", "../../../../../../../src/cdk/collections/recycle-view-repeater-strategy.ts", "../../../../../../../src/cdk/collections/selection-model.ts", "../../../../../../../src/cdk/collections/unique-selection-dispatcher.ts", "../../../../../../../src/cdk/collections/view-repeater.ts", "../../../../../../../src/cdk/collections/collections_public_index.ts", "../../../../../../../src/cdk/scrolling/virtual-scroll-strategy.ts", "../../../../../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts", "../../../../../../../src/cdk/scrolling/scroll-dispatcher.ts", "../../../../../../../src/cdk/scrolling/scrollable.ts", "../../../../../../../src/cdk/scrolling/viewport-ruler.ts", "../../../../../../../src/cdk/scrolling/virtual-scrollable.ts", "../../../../../../../src/cdk/scrolling/virtual-scroll-viewport.ts", "../../../../../../../src/cdk/scrolling/virtual-scroll-viewport.html", "../../../../../../../src/cdk/scrolling/virtual-for-of.ts", "../../../../../../../src/cdk/scrolling/virtual-scrollable-element.ts", "../../../../../../../src/cdk/scrolling/virtual-scrollable-window.ts", "../../../../../../../src/cdk/scrolling/scrolling-module.ts", "../../../../../../../src/cdk/scrolling/scrolling_public_index.ts", "../../../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/position/scroll-clip.ts", "../../../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts", "../../../../../../../src/cdk/overlay/overlay-config.ts", "../../../../../../../src/cdk/overlay/position/connected-position.ts", "../../../../../../../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts", "../../../../../../../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts", "../../../../../../../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts", "../../../../../../../src/cdk/overlay/overlay-container.ts", "../../../../../../../src/cdk/overlay/overlay-ref.ts", "../../../../../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts", "../../../../../../../src/cdk/overlay/position/global-position-strategy.ts", "../../../../../../../src/cdk/overlay/position/overlay-position-builder.ts", "../../../../../../../src/cdk/overlay/overlay.ts", "../../../../../../../src/cdk/overlay/overlay-directives.ts", "../../../../../../../src/cdk/overlay/overlay-module.ts", "../../../../../../../src/cdk/overlay/fullscreen-overlay-container.ts", "../../../../../../../src/cdk/overlay/overlay_public_index.ts", "../../../../../../../src/material/snack-bar/snack-bar-ref.ts", "../../../../../../../src/material/snack-bar/snack-bar-config.ts", "../../../../../../../src/material/snack-bar/snack-bar-content.ts", "../../../../../../../src/material/snack-bar/simple-snack-bar.ts", "../../../../../../../src/material/snack-bar/simple-snack-bar.html", "../../../../../../../src/material/snack-bar/snack-bar-animations.ts", "../../../../../../../src/material/snack-bar/snack-bar-container.ts", "../../../../../../../src/material/snack-bar/snack-bar-container.html", "../../../../../../../src/material/snack-bar/snack-bar.ts", "../../../../../../../src/material/snack-bar/module.ts", "../../../../../../../src/material/snack-bar/snack-bar_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId\n    ? isPlatformBrowser(this._platformId)\n    : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean =\n    this.isBrowser &&\n    !!((window as any).chrome || hasV8BreakIterator) &&\n    typeof CSS !== 'undefined' &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean =\n    this.isBrowser &&\n    /AppleWebKit/i.test(navigator.userAgent) &&\n    !this.BLINK &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean =\n    this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  constructor(@Inject(PLATFORM_ID) private _platformId: Object) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class PlatformModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(\n    candidateInputTypes.filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }),\n  );\n\n  return supportedInputTypes;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener(\n        'test',\n        null!,\n        Object.defineProperty({}, 'passive', {\n          get: () => (supportsPassiveEvents = true),\n        }),\n      );\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(\n  options: AddEventListenerOptions,\n): AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport const enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED,\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType | undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean | undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function | undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n        scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null {\n  let activeElement =\n    typeof document !== 'undefined' && document\n      ? (document.activeElement as HTMLElement | null)\n      : null;\n\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement as HTMLElement | null;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n\n  return activeElement;\n}\n\n/** Gets the target of an event while accounting for Shadow DOM. */\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as T | null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether the code is currently running in a test environment. */\nexport function _isTestEnvironment(): boolean {\n  // We can't use `declare const` because it causes conflicts inside Google with the real typings\n  // for these symbols and we can't read them off the global object, because they don't appear to\n  // be attached there for some runners like Jest.\n  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n  return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n    // @ts-ignore\n    (typeof jasmine !== 'undefined' && !!jasmine) ||\n    // @ts-ignore\n    (typeof jest !== 'undefined' && !!jest) ||\n    // @ts-ignore\n    (typeof Mocha !== 'undefined' && !!Mocha)\n  );\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const MAC_ENTER = 3;\nexport const BACKSPACE = 8;\nexport const TAB = 9;\nexport const NUM_CENTER = 12;\nexport const ENTER = 13;\nexport const SHIFT = 16;\nexport const CONTROL = 17;\nexport const ALT = 18;\nexport const PAUSE = 19;\nexport const CAPS_LOCK = 20;\nexport const ESCAPE = 27;\nexport const SPACE = 32;\nexport const PAGE_UP = 33;\nexport const PAGE_DOWN = 34;\nexport const END = 35;\nexport const HOME = 36;\nexport const LEFT_ARROW = 37;\nexport const UP_ARROW = 38;\nexport const RIGHT_ARROW = 39;\nexport const DOWN_ARROW = 40;\nexport const PLUS_SIGN = 43;\nexport const PRINT_SCREEN = 44;\nexport const INSERT = 45;\nexport const DELETE = 46;\nexport const ZERO = 48;\nexport const ONE = 49;\nexport const TWO = 50;\nexport const THREE = 51;\nexport const FOUR = 52;\nexport const FIVE = 53;\nexport const SIX = 54;\nexport const SEVEN = 55;\nexport const EIGHT = 56;\nexport const NINE = 57;\nexport const FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186\nexport const FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187\nexport const QUESTION_MARK = 63;\nexport const AT_SIGN = 64;\nexport const A = 65;\nexport const B = 66;\nexport const C = 67;\nexport const D = 68;\nexport const E = 69;\nexport const F = 70;\nexport const G = 71;\nexport const H = 72;\nexport const I = 73;\nexport const J = 74;\nexport const K = 75;\nexport const L = 76;\nexport const M = 77;\nexport const N = 78;\nexport const O = 79;\nexport const P = 80;\nexport const Q = 81;\nexport const R = 82;\nexport const S = 83;\nexport const T = 84;\nexport const U = 85;\nexport const V = 86;\nexport const W = 87;\nexport const X = 88;\nexport const Y = 89;\nexport const Z = 90;\nexport const META = 91; // WIN_KEY_LEFT\nexport const MAC_WK_CMD_LEFT = 91;\nexport const MAC_WK_CMD_RIGHT = 93;\nexport const CONTEXT_MENU = 93;\nexport const NUMPAD_ZERO = 96;\nexport const NUMPAD_ONE = 97;\nexport const NUMPAD_TWO = 98;\nexport const NUMPAD_THREE = 99;\nexport const NUMPAD_FOUR = 100;\nexport const NUMPAD_FIVE = 101;\nexport const NUMPAD_SIX = 102;\nexport const NUMPAD_SEVEN = 103;\nexport const NUMPAD_EIGHT = 104;\nexport const NUMPAD_NINE = 105;\nexport const NUMPAD_MULTIPLY = 106;\nexport const NUMPAD_PLUS = 107;\nexport const NUMPAD_MINUS = 109;\nexport const NUMPAD_PERIOD = 110;\nexport const NUMPAD_DIVIDE = 111;\nexport const F1 = 112;\nexport const F2 = 113;\nexport const F3 = 114;\nexport const F4 = 115;\nexport const F5 = 116;\nexport const F6 = 117;\nexport const F7 = 118;\nexport const F8 = 119;\nexport const F9 = 120;\nexport const F10 = 121;\nexport const F11 = 122;\nexport const F12 = 123;\nexport const NUM_LOCK = 144;\nexport const SCROLL_LOCK = 145;\nexport const FIRST_MEDIA = 166;\nexport const FF_MINUS = 173;\nexport const MUTE = 173; // Firefox (Gecko) fires 181 for MUTE\nexport const VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN\nexport const VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP\nexport const FF_MUTE = 181;\nexport const FF_VOLUME_DOWN = 182;\nexport const LAST_MEDIA = 183;\nexport const FF_VOLUME_UP = 183;\nexport const SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON\nexport const EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS\nexport const COMMA = 188;\nexport const DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS\nexport const PERIOD = 190;\nexport const SLASH = 191;\nexport const APOSTROPHE = 192;\nexport const TILDE = 192;\nexport const OPEN_SQUARE_BRACKET = 219;\nexport const BACKSLASH = 220;\nexport const CLOSE_SQUARE_BRACKET = 221;\nexport const SINGLE_QUOTE = 222;\nexport const MAC_META = 224;\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type ModifierKey = 'altKey' | 'shiftKey' | 'ctrlKey' | 'metaKey';\n\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nexport function hasModifierKey(event: KeyboardEvent, ...modifiers: ModifierKey[]): boolean {\n  if (modifiers.length) {\n    return modifiers.some(modifier => event[modifier]);\n  }\n\n  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a number input\n * @docs-private\n */\nexport type NumberInput = string | number | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a number. */\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nexport function _isNumberValue(value: any): boolean {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a value to a CSS pixel value. */\nexport function coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nexport function coerceStringArray(value: any, separator: string | RegExp = /\\s+/): string[] {\n  const result = [];\n\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n\n  return result;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceElement, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n  booleanAttribute,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<\n    Element,\n    {\n      observer: MutationObserver | null;\n      readonly stream: Subject<MutationRecord[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input({alias: 'cdkObserveContentDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number {\n    return this._debounce;\n  }\n  set debounce(value: NumberInput) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(\n    private _contentObserver: ContentObserver,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (\n        this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream\n      ).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n}\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory],\n})\nexport class ObserversModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class LayoutModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, CSP_NONCE, Optional, Inject} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(\n    private _platform: Platform,\n    @Optional() @Inject(CSP_NONCE) private _nonce?: string | null,\n  ) {\n    this._matchMedia =\n      this._platform.isBrowser && window.matchMedia\n        ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n          // call it from a different scope.\n          window.matchMedia.bind(window)\n        : noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query: string, nonce: string | undefined | null) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n\n      if (nonce) {\n        mediaQueryStyleNode.nonce = nonce;\n      }\n\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {},\n  } as any;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private readonly _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)),\n    );\n    return stateObservable.pipe(\n      map(breakpointStates => {\n        const response: BreakpointState = {\n          matches: false,\n          breakpoints: {},\n        };\n        breakpointStates.forEach(({matches, query}) => {\n          response.matches = response.matches || matches;\n          response.breakpoints[query] = matches;\n        });\n        return response;\n      }),\n    );\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryListEvent>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: MediaQueryListEvent): void => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject),\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries\n    .map(query => query.split(','))\n    .reduce((a1, a2) => a1.concat(a2))\n    .map(query => query.trim());\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset:\n    '(max-width: 599.98px) and (orientation: portrait), ' +\n    '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet:\n    '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n    '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web:\n    '(min-width: 840px) and (orientation: portrait), ' +\n    '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy, APP_ID, inject} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  /** Map of all registered message elements that have been placed into the document. */\n  private _messageRegistry = new Map<string | Element, RegisteredMessage>();\n\n  /** Container for all registered messages. */\n  private _messagesContainer: HTMLElement | null = null;\n\n  /** Unique ID for the service. */\n  private readonly _id = `${nextId++}`;\n\n  constructor(\n    @Inject(DOCUMENT) _document: any,\n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    private _platform?: Platform,\n  ) {\n    this._document = _document;\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string, role?: string): void;\n\n  /**\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\n   */\n  describe(hostElement: Element, message: HTMLElement): void;\n\n  describe(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message, this._id);\n      this._messageRegistry.set(key, {messageElement: message, referenceCount: 0});\n    } else if (!this._messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message. */\n  removeDescription(hostElement: Element, message: string, role?: string): void;\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: HTMLElement): void;\n\n  removeDescription(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = this._messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (this._messagesContainer?.childNodes.length === 0) {\n      this._messagesContainer.remove();\n      this._messagesContainer = null;\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(\n      `[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`,\n    );\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    this._messagesContainer?.remove();\n    this._messagesContainer = null;\n    this._messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string, role?: string) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement, this._id);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n    this._messagesContainer!.appendChild(messageElement);\n    this._messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(key: string | Element) {\n    this._messageRegistry.get(key)?.messageElement?.remove();\n    this._messageRegistry.delete(key);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (this._messagesContainer) {\n      return;\n    }\n\n    const containerClassName = 'cdk-describedby-message-container';\n    const serverContainers = this._document.querySelectorAll(\n      `.${containerClassName}[platform=\"server\"]`,\n    );\n\n    for (let i = 0; i < serverContainers.length; i++) {\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      serverContainers[i].remove();\n    }\n\n    const messagesContainer = this._document.createElement('div');\n\n    // We add `visibility: hidden` in order to prevent text in this container from\n    // being searchable by the browser's Ctrl + F functionality.\n    // Screen-readers will still read the description for elements with aria-describedby even\n    // when the description element is not visible.\n    messagesContainer.style.visibility = 'hidden';\n    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n    // the description element doesn't impact page layout.\n    messagesContainer.classList.add(containerClassName);\n    messagesContainer.classList.add('cdk-visually-hidden');\n\n    // @breaking-change 14.0.0 Remove null check for `_platform`.\n    if (this._platform && !this._platform.isBrowser) {\n      messagesContainer.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(messagesContainer);\n    this._messagesContainer = messagesContainer;\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n      id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0,\n    );\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, key: string | Element): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = this._messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string | HTMLElement | void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message: string | Element, role?: string): string | Element {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element: HTMLElement, serviceId: string) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n  PAGE_UP,\n  PAGE_DOWN,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _itemChangesSubscription?: Subscription;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n  private _pageUpAndDown = {enabled: false, delta: 10};\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead(): this {\n    this._pressedLetters = [];\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled: boolean = true, delta: number = 10): this {\n    this._pageUpAndDown = {enabled, delta};\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return (\n      isPotentiallyFocusable(element) &&\n      !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element))\n    );\n  }\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(\n    element.offsetWidth ||\n    element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length)\n  );\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return (\n    nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea'\n  );\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return (\n    inputType === 'text' ||\n    inputType === 'password' ||\n    nodeName === 'select' ||\n    nodeName === 'textarea'\n  );\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return (\n    isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element)\n  );\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_getFocusedElementPierceShadowDom} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n  SimpleChanges,\n  OnChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false,\n  ) {\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(\n      `[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`,\n    ) as NodeListOf<HTMLElement>;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n              `attribute will be removed in 8.0.0.`,\n            markers[i],\n          );\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n              `will be removed in 8.0.0.`,\n            markers[i],\n          );\n        }\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length\n      ? markers[markers.length - 1]\n      : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options?: FocusOptions): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(\n      `[cdk-focus-initial], ` + `[cdkFocusInitial]`,\n    ) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        redirectToElement.hasAttribute(`cdk-focus-initial`)\n      ) {\n        console.warn(\n          `Found use of deprecated attribute 'cdk-focus-initial', ` +\n            `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n            `will be removed in 8.0.0`,\n          redirectToElement,\n        );\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !this._checker.isFocusable(redirectToElement)\n      ) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    const children = root.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getFirstTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    const children = root.children;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getLastTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      deferCaptureElements,\n    );\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input({alias: 'cdkTrapFocus', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this.focusTrap.enabled;\n  }\n  set enabled(value: boolean) {\n    this.focusTrap.enabled = value;\n  }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input({alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute}) autoCapture: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (\n      autoCaptureChange &&\n      !autoCaptureChange.firstChange &&\n      this.autoCapture &&\n      this.focusTrap.hasAttached()\n    ) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {FocusTrap} from './focus-trap';\nimport {FocusTrapManager, ManagedFocusTrap} from './focus-trap-manager';\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  override get enabled(): boolean {\n    return this._enabled;\n  }\n  override set enabled(value: boolean) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n\n  constructor(\n    _element: HTMLElement,\n    _checker: InteractivityChecker,\n    _ngZone: NgZone,\n    _document: Document,\n    private _focusTrapManager: FocusTrapManager,\n    private _inertStrategy: FocusTrapInertStrategy,\n    config: ConfigurableFocusTrapConfig,\n  ) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager.register(this);\n  }\n\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  override destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {FocusTrap} from './focus-trap';\n\n/** The injection token used to specify the inert strategy. */\nexport const FOCUS_TRAP_INERT_STRATEGY = new InjectionToken<FocusTrapInertStrategy>(\n  'FOCUS_TRAP_INERT_STRATEGY',\n);\n\n/**\n * A strategy that dictates how FocusTrap should prevent elements\n * outside of the FocusTrap from being focused.\n */\nexport interface FocusTrapInertStrategy {\n  /** Makes all elements outside focusTrap unfocusable. */\n  preventFocus(focusTrap: FocusTrap): void;\n  /** Reverts elements made unfocusable by preventFocus to their previous state. */\n  allowFocus(focusTrap: FocusTrap): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\n  /** Focus event handler. */\n  private _listener: ((e: FocusEvent) => void) | null = null;\n\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap: ConfigurableFocusTrap): void {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener!, true);\n    }\n\n    this._listener = (e: FocusEvent) => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener!, true);\n    });\n  }\n\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap: ConfigurableFocusTrap): void {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener!, true);\n    this._listener = null;\n  }\n\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  private _trapFocus(focusTrap: ConfigurableFocusTrap, event: FocusEvent) {\n    const target = event.target as HTMLElement;\n    const focusTrapRoot = focusTrap._element;\n\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n */\nexport interface ManagedFocusTrap {\n  _enable(): void;\n  _disable(): void;\n  focusInitialElementWhenReady(): Promise<boolean>;\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapManager {\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\n  // top of the stack is active.\n  private _focusTrapStack: ManagedFocusTrap[] = [];\n\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap: ManagedFocusTrap): void {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap: ManagedFocusTrap): void {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, Optional, NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\nimport {FOCUS_TRAP_INERT_STRATEGY, FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {EventListenerFocusTrapInertStrategy} from './event-listener-inert-strategy';\nimport {FocusTrapManager} from './focus-trap-manager';\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n@Injectable({providedIn: 'root'})\nexport class ConfigurableFocusTrapFactory {\n  private _document: Document;\n  private _inertStrategy: FocusTrapInertStrategy;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    private _focusTrapManager: FocusTrapManager,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(FOCUS_TRAP_INERT_STRATEGY) _inertStrategy?: FocusTrapInertStrategy,\n  ) {\n    this._document = _document;\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param config The focus trap configuration.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\n\n  /**\n   * @deprecated Pass a config object instead of the `deferCaptureElements` flag.\n   * @breaking-change 11.0.0\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\n\n  create(\n    element: HTMLElement,\n    config: ConfigurableFocusTrapConfig | boolean = {defer: false},\n  ): ConfigurableFocusTrap {\n    let configObject: ConfigurableFocusTrapConfig;\n    if (typeof config === 'boolean') {\n      configObject = {defer: config};\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      this._focusTrapManager,\n      this._inertStrategy,\n      configObject,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nexport function isFakeTouchstartFromScreenReader(event: TouchEvent): boolean {\n  const touch: Touch | undefined =\n    (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return (\n    !!touch &&\n    touch.identifier === -1 &&\n    (touch.radiusX == null || touch.radiusX === 1) &&\n    (touch.radiusY == null || touch.radiusY === 1)\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ALT, CONTROL, MAC_META, META, SHIFT} from '@angular/cdk/keycodes';\nimport {Inject, Injectable, InjectionToken, OnDestroy, Optional, NgZone} from '@angular/core';\nimport {normalizePassiveListenerOptions, Platform, _getEventTarget} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {distinctUntilChanged, skip} from 'rxjs/operators';\nimport {\n  isFakeMousedownFromScreenReader,\n  isFakeTouchstartFromScreenReader,\n} from '../fake-event-detection';\n\n/**\n * The input modalities detected by this service. Null is used if the input modality is unknown.\n */\nexport type InputModality = 'keyboard' | 'mouse' | 'touch' | null;\n\n/** Options to configure the behavior of the InputModalityDetector. */\nexport interface InputModalityDetectorOptions {\n  /** Keys to ignore when detecting keyboard input modality. */\n  ignoreKeys?: number[];\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nexport const INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken<InputModalityDetectorOptions>(\n  'cdk-input-modality-detector-options',\n);\n\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nexport const INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS: InputModalityDetectorOptions = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nexport const TOUCH_BUFFER_MS = 650;\n\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n@Injectable({providedIn: 'root'})\nexport class InputModalityDetector implements OnDestroy {\n  /** Emits whenever an input modality is detected. */\n  readonly modalityDetected: Observable<InputModality>;\n\n  /** Emits when the input modality changes. */\n  readonly modalityChanged: Observable<InputModality>;\n\n  /** The most recently detected input modality. */\n  get mostRecentModality(): InputModality {\n    return this._modality.value;\n  }\n\n  /**\n   * The most recently detected input modality event target. Is null if no input modality has been\n   * detected or if the associated event target is null for some unknown reason.\n   */\n  _mostRecentTarget: HTMLElement | null = null;\n\n  /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n  private readonly _modality = new BehaviorSubject<InputModality>(null);\n\n  /** Options for this InputModalityDetector. */\n  private readonly _options: InputModalityDetectorOptions;\n\n  /**\n   * The timestamp of the last touch input modality. Used to determine whether mousedown events\n   * should be attributed to mouse or touch.\n   */\n  private _lastTouchMs = 0;\n\n  /**\n   * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n   * bound.\n   */\n  private _onKeydown = (event: KeyboardEvent) => {\n    // If this is one of the keys we should ignore, then ignore it and don't update the input\n    // modality to keyboard.\n    if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n      return;\n    }\n\n    this._modality.next('keyboard');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onMousedown = (event: MouseEvent) => {\n    // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n    // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n    // after the previous touch event.\n    if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n      return;\n    }\n\n    // Fake mousedown events are fired by some screen readers when controls are activated by the\n    // screen reader. Attribute them to keyboard input modality.\n    this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onTouchstart = (event: TouchEvent) => {\n    // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n    // events are fired. Again, attribute to keyboard input modality.\n    if (isFakeTouchstartFromScreenReader(event)) {\n      this._modality.next('keyboard');\n      return;\n    }\n\n    // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n    // triggered via mouse vs touch.\n    this._lastTouchMs = Date.now();\n\n    this._modality.next('touch');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  constructor(\n    private readonly _platform: Platform,\n    ngZone: NgZone,\n    @Inject(DOCUMENT) document: Document,\n    @Optional()\n    @Inject(INPUT_MODALITY_DETECTOR_OPTIONS)\n    options?: InputModalityDetectorOptions,\n  ) {\n    this._options = {\n      ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    // Skip the first emission as it's null.\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n\n    // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n    if (_platform.isBrowser) {\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._modality.complete();\n\n    if (this._platform.isBrowser) {\n      document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n      document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n      document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement | null>(\n  'liveAnnouncerElement',\n  {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken<LiveAnnouncerDefaultOptions>(\n  'LIVE_ANNOUNCER_DEFAULT_OPTIONS',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\n\nlet uniqueIds = 0;\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _liveElement: HTMLElement;\n  private _document: Document;\n  private _previousTimeout: number;\n  private _currentPromise: Promise<void> | undefined;\n  private _currentResolve: (() => void) | undefined;\n\n  constructor(\n    @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n    @Optional()\n    @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\n    private _defaultOptions?: LiveAnnouncerDefaultOptions,\n  ) {\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n        defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    if (this._liveElement.id) {\n      this._exposeAnnouncerToModals(this._liveElement.id);\n    }\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n      }\n\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n\n        this._currentResolve!();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n\n      return this._currentPromise;\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null!;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live announcer element if there is an\n   * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live announcer element.\n   */\n  private _exposeAnnouncerToModals(id: string) {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `SnakBarContainer` and other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n}\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness {\n    return this._politeness;\n  }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  /** Time in milliseconds after which to clear out the announcer element. */\n  @Input('cdkAriaLiveDuration') duration: number;\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _liveAnnouncer: LiveAnnouncer,\n    private _contentObserver: ContentObserver,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Platform,\n  normalizePassiveListenerOptions,\n  _getShadowRoot,\n  _getEventTarget,\n} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {InputModalityDetector, TOUCH_BUFFER_MS} from '../input-modality/input-modality-detector';\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n/** Detection mode used for attributing the origin of a focus event. */\nexport const enum FocusMonitorDetectionMode {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE,\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n   */\n  EVENTUAL,\n}\n\n/** Injectable service-level options for FocusMonitor. */\nexport interface FocusMonitorOptions {\n  detectionMode?: FocusMonitorDetectionMode;\n}\n\n/** InjectionToken for FocusMonitorOptions. */\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken<FocusMonitorOptions>(\n  'cdk-focus-monitor-default-options',\n);\n\ntype MonitoredElementInfo = {\n  checkChildren: boolean;\n  readonly subject: Subject<FocusOrigin>;\n  rootNode: HTMLElement | ShadowRoot | Document;\n};\n\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /**\n   * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n   * focus events to touch interactions requires special logic.\n   */\n  private _originFromTouchInteraction = false;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   */\n  private _rootNodeFocusListenerCount = new Map<HTMLElement | Document | ShadowRoot, number>();\n\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   */\n  private readonly _detectionMode: FocusMonitorDetectionMode;\n\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _windowFocusListener = () => {\n    // Make a note of when the window regains focus, so we can\n    // restore the origin info for the focused element.\n    this._windowFocused = true;\n    this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n  };\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  /** Subject for stopping our InputModalityDetector subscription. */\n  private readonly _stopInputModalityDetector = new Subject<void>();\n\n  constructor(\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private readonly _inputModalityDetector: InputModalityDetector,\n    /** @breaking-change 11.0.0 make document required */\n    @Optional() @Inject(DOCUMENT) document: any | null,\n    @Optional() @Inject(FOCUS_MONITOR_DEFAULT_OPTIONS) options: FocusMonitorOptions | null,\n  ) {\n    this._document = document;\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n  }\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\n    const target = _getEventTarget<HTMLElement>(event);\n\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\n    for (let element = target; element; element = element.parentElement) {\n      if (event.type === 'focus') {\n        this._onFocus(event as FocusEvent, element);\n      } else {\n        this._onBlur(event as FocusEvent, element);\n      }\n    }\n  };\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    checkChildren: boolean = false,\n  ): Observable<FocusOrigin> {\n    const nativeElement = coerceElement(element);\n\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      // Note: we don't want the observable to emit at all so we don't pass any parameters.\n      return observableOf();\n    }\n\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    }\n\n    // Create monitored element info.\n    const info: MonitoredElementInfo = {\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>(),\n      rootNode,\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    origin: FocusOrigin,\n    options?: FocusOptions,\n  ): void {\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) =>\n        this._originChanged(currentElement, origin, info),\n      );\n    } else {\n      this._setOrigin(origin);\n\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  private _getFocusOrigin(focusEventTarget: HTMLElement | null): FocusOrigin {\n    if (this._origin) {\n      // If the origin was realized via a touch interaction, we need to perform additional checks\n      // to determine whether the focus origin should be attributed to touch or program.\n      if (this._originFromTouchInteraction) {\n        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n      } else {\n        return this._origin;\n      }\n    }\n\n    // If the window has just regained focus, we can restore the most recent origin from before the\n    // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n    // focus. This typically means one of two things happened:\n    //\n    // 1) The element was programmatically focused, or\n    // 2) The element was focused via screen reader navigation (which generally doesn't fire\n    //    events).\n    //\n    // Because we can't distinguish between these two cases, we default to setting `program`.\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    }\n\n    // If the interaction is coming from an input label, we consider it a mouse interactions.\n    // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n    // our detection, because all our assumptions are for `mousedown`. We need to handle this\n    // special case, because it's very common for checkboxes and radio buttons.\n    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n      return 'mouse';\n    }\n\n    return 'program';\n  }\n\n  /**\n   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n   * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n   * event was directly caused by the touch interaction or (2) the focus event was caused by a\n   * subsequent programmatic focus call triggered by the touch interaction.\n   * @param focusEventTarget The target of the focus event under examination.\n   */\n  private _shouldBeAttributedToTouch(focusEventTarget: HTMLElement | null): boolean {\n    // Please note that this check is not perfect. Consider the following edge case:\n    //\n    // <div #parent tabindex=\"0\">\n    //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n    // #child, #parent is programmatically focused. This code will attribute the focus to touch\n    // instead of program. This is a relatively minor edge-case that can be worked around by using\n    // focusVia(parent, 'program') to focus #parent.\n    return (\n      this._detectionMode === FocusMonitorDetectionMode.EVENTUAL ||\n      !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget)\n    );\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    element.classList.toggle('cdk-focused', !!origin);\n    element.classList.toggle('cdk-touch-focused', origin === 'touch');\n    element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n    element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n    element.classList.toggle('cdk-program-focused', origin === 'program');\n  }\n\n  /**\n   * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n   * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n   * the origin being set.\n   * @param origin The origin to set.\n   * @param isFromInteraction Whether we are setting the origin from an interaction event.\n   */\n  private _setOrigin(origin: FocusOrigin, isFromInteraction = false): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n\n      // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n      // a touch event because when a touch event is fired, the associated focus event isn't yet in\n      // the event queue. Before doing so, clear any pending timeouts.\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n        clearTimeout(this._originTimeoutId);\n        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n        this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n      }\n    });\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    const focusEventTarget = _getEventTarget<HTMLElement>(event);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (\n      !elementInfo ||\n      (elementInfo.checkChildren &&\n        event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))\n    ) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo, null);\n  }\n\n  private _emitOrigin(info: MonitoredElementInfo, origin: FocusOrigin) {\n    if (info.subject.observers.length) {\n      this._ngZone.run(() => info.subject.next(origin));\n    }\n  }\n\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.addEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n\n      // The InputModalityDetector is also just a collection of global listeners.\n      this._inputModalityDetector.modalityDetected\n        .pipe(takeUntil(this._stopInputModalityDetector))\n        .subscribe(modality => {\n          this._setOrigin(modality, true /* isFromInteraction */);\n        });\n    }\n  }\n\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.removeEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      const window = this._getWindow();\n      window.removeEventListener('focus', this._windowFocusListener);\n\n      // Equivalently, stop our InputModalityDetector subscription.\n      this._stopInputModalityDetector.next();\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n  /** Updates all the state on an element once its focus origin has changed. */\n  private _originChanged(\n    element: HTMLElement,\n    origin: FocusOrigin,\n    elementInfo: MonitoredElementInfo,\n  ) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n  private _getClosestElementsInfo(element: HTMLElement): [HTMLElement, MonitoredElementInfo][] {\n    const results: [HTMLElement, MonitoredElementInfo][] = [];\n\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n        results.push([currentElement, info]);\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Returns whether an interaction is likely to have come from the user clicking the `label` of\n   * an `input` or `textarea` in order to focus it.\n   * @param focusEventTarget Target currently receiving focus.\n   */\n  private _isLastInteractionFromInputLabel(focusEventTarget: HTMLElement): boolean {\n    const {_mostRecentTarget: mostRecentTarget, mostRecentModality} = this._inputModalityDetector;\n\n    // If the last interaction used the mouse on an element contained by one of the labels\n    // of an `input`/`textarea` that is currently focused, it is very likely that the\n    // user redirected focus using the label.\n    if (\n      mostRecentModality !== 'mouse' ||\n      !mostRecentTarget ||\n      mostRecentTarget === focusEventTarget ||\n      (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n      (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).disabled\n    ) {\n      return false;\n    }\n\n    const labels = (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).labels;\n\n    if (labels) {\n      for (let i = 0; i < labels.length; i++) {\n        if (labels[i].contains(mostRecentTarget)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n  exportAs: 'cdkMonitorFocus',\n})\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n  private _monitorSubscription: Subscription;\n  private _focusOrigin: FocusOrigin = null;\n\n  @Output() readonly cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {}\n\n  get focusOrigin(): FocusOrigin {\n    return this._focusOrigin;\n  }\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor\n      .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n      .subscribe(origin => {\n        this._focusOrigin = origin;\n        this.cdkFocusChange.emit(origin);\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Inject, Injectable, OnDestroy} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription} from 'rxjs';\n\n/** Set of possible high-contrast mode backgrounds. */\nexport const enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector implements OnDestroy {\n  /**\n   * Figuring out the high contrast mode and adding the body classes can cause\n   * some expensive layouts. This flag is used to ensure that we only do it once.\n   */\n  private _hasCheckedHighContrastMode: boolean;\n  private _document: Document;\n  private _breakpointSubscription: Subscription;\n\n  constructor(private _platform: Platform, @Inject(DOCUMENT) document: any) {\n    this._document = document;\n\n    this._breakpointSubscription = inject(BreakpointObserver)\n      .observe('(forced-colors: active)')\n      .subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle =\n      documentWindow && documentWindow.getComputedStyle\n        ? documentWindow.getComputedStyle(testElement)\n        : null;\n    const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(\n      / /g,\n      '',\n    );\n    testElement.remove();\n\n    switch (computedColor) {\n      // Pre Windows 11 dark theme.\n      case 'rgb(0,0,0)':\n      // Windows 11 dark themes.\n      case 'rgb(45,50,54)':\n      case 'rgb(32,32,32)':\n        return HighContrastMode.WHITE_ON_BLACK;\n      // Pre Windows 11 light theme.\n      case 'rgb(255,255,255)':\n      // Windows 11 light theme.\n      case 'rgb(255,250,239)':\n        return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  ngOnDestroy(): void {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      bodyClasses.remove(\n        HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS,\n        BLACK_ON_WHITE_CSS_CLASS,\n        WHITE_ON_BLACK_CSS_CLASS,\n      );\n      this._hasCheckedHighContrastMode = true;\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor(highContrastModeDetector: HighContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\nexport type Direction = 'ltr' | 'rtl';\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN =\n  /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n\n/** Resolves a string value to a specific direction. */\nexport function _resolveDirectionality(rawValue: string): Direction {\n  const value = rawValue?.toLowerCase() || '';\n\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Output, Input, EventEmitter, AfterContentInit, OnDestroy} from '@angular/core';\n\nimport {Direction, Directionality, _resolveDirectionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') readonly change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction {\n    return this._dir;\n  }\n  set dir(value: Direction | 'auto') {\n    const previousValue = this._dir;\n\n    // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n    // whereas the browser does it based on the content of the element. Since doing so based\n    // on the content can be expensive, for now we're doing the simpler matching.\n    this._dir = _resolveDirectionality(value);\n    this._rawDir = value;\n\n    if (previousValue !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction {\n    return this.dir;\n  }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of the Angular Component Development Kit. */\nexport const VERSION = new Version('17.0.1');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('17.0.1');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HighContrastModeDetector} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {inject, Inject, InjectionToken, NgModule, Optional} from '@angular/core';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform, _isTestEnvironment} from '@angular/cdk/platform';\nimport {VERSION} from '../version';\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): SanityChecks {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<SanityChecks>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Possible sanity checks that can be enabled. If set to\n * true/false, all checks will be enabled/disabled.\n */\nexport type SanityChecks = boolean | GranularSanityChecks;\n\n/** Object that can be used to configure the sanity checks granularly. */\nexport interface GranularSanityChecks {\n  doctype: boolean;\n  theme: boolean;\n  version: boolean;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  constructor(\n    highContrastModeDetector: HighContrastModeDetector,\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecks: SanityChecks,\n    @Inject(DOCUMENT) private _document: Document,\n  ) {\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n\n    if (!this._hasDoneGlobalChecks) {\n      this._hasDoneGlobalChecks = true;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Inject in here so the reference to `Platform` can be removed in production mode.\n        const platform = inject(Platform, {optional: true});\n\n        if (this._checkIsEnabled('doctype')) {\n          _checkDoctypeIsDefined(this._document);\n        }\n\n        if (this._checkIsEnabled('theme')) {\n          _checkThemeIsPresent(this._document, !!platform?.isBrowser);\n        }\n\n        if (this._checkIsEnabled('version')) {\n          _checkCdkVersionMatch();\n        }\n      }\n    }\n  }\n\n  /** Gets whether a specific sanity check is enabled. */\n  private _checkIsEnabled(name: keyof GranularSanityChecks): boolean {\n    if (_isTestEnvironment()) {\n      return false;\n    }\n\n    if (typeof this._sanityChecks === 'boolean') {\n      return this._sanityChecks;\n    }\n\n    return !!this._sanityChecks[name];\n  }\n}\n\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc: Document): void {\n  if (!doc.doctype) {\n    console.warn(\n      'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.',\n    );\n  }\n}\n\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc: Document, isBrowser: boolean): void {\n  // We need to assert that the `body` is defined, because these checks run very early\n  // and the `body` won't be defined if the consumer put their scripts in the `head`.\n  if (!doc.body || !isBrowser) {\n    return;\n  }\n\n  const testElement = doc.createElement('div');\n  testElement.classList.add('mat-theme-loaded-marker');\n  doc.body.appendChild(testElement);\n\n  const computedStyle = getComputedStyle(testElement);\n\n  // In some situations the computed style of the test element can be null. For example in\n  // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  if (computedStyle && computedStyle.display !== 'none') {\n    console.warn(\n      'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming',\n    );\n  }\n\n  testElement.remove();\n}\n\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch(): void {\n  if (VERSION.full !== CDK_VERSION.full) {\n    console.warn(\n      'The Angular Material version (' +\n        VERSION.full +\n        ') does not match ' +\n        'the Angular CDK version (' +\n        CDK_VERSION.full +\n        ').\\n' +\n        'Please ensure the versions of these two packages exactly match.',\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\ntype CanDisableCtor = Constructor<CanDisable> & AbstractConstructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends AbstractConstructor<{}>>(base: T): CanDisableCtor & T;\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled(): boolean {\n      return this._disabled;\n    }\n    set disabled(value: any) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractConstructor, Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n\n  /** Default color to fall back to if no value is set. */\n  defaultColor: ThemePalette | undefined;\n}\n\ntype CanColorCtor = Constructor<CanColor> & AbstractConstructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends AbstractConstructor<HasElementRef>>(\n  base: T,\n  defaultColor?: ThemePalette,\n): CanColorCtor & T;\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n  base: T,\n  defaultColor?: ThemePalette,\n): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n    defaultColor = defaultColor;\n\n    get color(): ThemePalette {\n      return this._color;\n    }\n    set color(value: ThemePalette) {\n      const colorPalette = value || this.defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\ntype CanDisableRippleCtor = Constructor<CanDisableRipple> & AbstractConstructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends AbstractConstructor<{}>>(\n  base: T,\n): CanDisableRippleCtor & T;\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple(): boolean {\n      return this._disableRipple;\n    }\n    set disableRipple(value: any) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Constructor, AbstractConstructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n\n  /** Tabindex to which to fall back to if no value is set. */\n  defaultTabIndex: number;\n}\n\ntype HasTabIndexCtor = Constructor<HasTabIndex> & AbstractConstructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends AbstractConstructor<CanDisable>>(\n  base: T,\n  defaultTabIndex?: number,\n): HasTabIndexCtor & T;\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(\n  base: T,\n  defaultTabIndex = 0,\n): HasTabIndexCtor & T {\n  return class extends base implements HasTabIndex {\n    private _tabIndex: number = defaultTabIndex;\n    defaultTabIndex = defaultTabIndex;\n\n    get tabIndex(): number {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState(): void;\n  /** Whether the component is in an error state. */\n  errorState: boolean;\n  /** An object used to control the error state of the component. */\n  errorStateMatcher: ErrorStateMatcher;\n}\n\ntype CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState> &\n  AbstractConstructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n\n  // These properties are defined as per the `MatFormFieldControl` interface. Since\n  // this mixin is commonly used with custom form-field controls, we respect the\n  // properties (also with the public name they need according to `MatFormFieldControl`).\n  ngControl: NgControl;\n  stateChanges: Subject<void>;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends AbstractConstructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T;\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /** An object used to control the error state of the component. */\n    errorStateMatcher: ErrorStateMatcher;\n\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\ntype HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T): HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\n          'This directive has already been marked as initialized and ' +\n            'should not be called twice.',\n        );\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<{}>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): {} {\n  return inject(LOCALE_ID);\n}\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D, L = any> {\n  /** The locale to use for all dates. */\n  protected locale: L;\n  protected readonly _localeChanges = new Subject<void>();\n\n  /** A stream that emits when the locale changes. */\n  readonly localeChanges: Observable<void> = this._localeChanges;\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj: unknown): D | null {\n    return this.isDateInstance(obj) && this.isValid(obj as D) ? (obj as D) : null;\n  }\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: L) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return (\n      this.getYear(first) - this.getYear(second) ||\n      this.getMonth(first) - this.getMonth(second) ||\n      this.getDate(first) - this.getDate(second)\n    );\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any;\n  };\n  display: {\n    dateInput: any;\n    monthLabel?: any;\n    monthYearLabel: any;\n    dateA11yLabel: any;\n    monthYearA11yLabel: any;\n  };\n};\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  useUtcForDisplay: boolean = false;\n\n  /** The injected locale. */\n  private readonly _matDateLocale = inject(MAT_DATE_LOCALE, {optional: true});\n\n  constructor(\n    /**\n     * @deprecated Now injected via inject(), param to be removed.\n     * @breaking-change 18.0.0\n     */\n    @Optional() @Inject(MAT_DATE_LOCALE) matDateLocale?: string,\n  ) {\n    super();\n    if (matDateLocale !== undefined) {\n      this._matDateLocale = matDateLocale;\n    }\n    super.setLocale(this._matDateLocale);\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n    return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n  }\n\n  getDateNames(): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n    return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n    return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getYearName(date: Date): string {\n    const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(\n      this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0),\n    );\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any, parseFormat?: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    const dtf = new Intl.DateTimeFormat(this.locale, {...displayFormat, timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date) + months,\n      this.getDate(date),\n    );\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date) + days,\n    );\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate()),\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  override deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  },\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, AbstractControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Directive, ElementRef, QueryList} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'},\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(\n  lines: QueryList<unknown>,\n  element: ElementRef<HTMLElement>,\n  prefix = 'mat',\n) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Possible states for a ripple element. */\nexport const enum RippleState {\n  FADING_IN,\n  VISIBLE,\n  FADING_OUT,\n  HIDDEN,\n}\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: {fadeOutRipple(ref: RippleRef): void},\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig,\n    /* Whether animations are forcibly disabled for ripples through CSS. */\n    public _animationForciblyDisabledThroughCss = false,\n  ) {}\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {NgZone} from '@angular/core';\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nexport class RippleEventManager {\n  private _events = new Map<string, Map<HTMLElement, Set<EventListenerObject>>>();\n\n  /** Adds an event handler. */\n  addHandler(ngZone: NgZone, name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes an event handler. */\n  removeHandler(name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (!handlersForEvent) {\n      return;\n    }\n\n    const handlersForElement = handlersForEvent.get(element);\n\n    if (!handlersForElement) {\n      return;\n    }\n\n    handlersForElement.delete(handler);\n\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n    }\n  }\n\n  /** Event handler that is bound and which dispatches the events to the different targets. */\n  private _delegateEventHandler = (event: Event) => {\n    const target = _getEventTarget(event);\n\n    if (target) {\n      this._events.get(event.type)?.forEach((handlers, element) => {\n        if (element === target || element.contains(target as Node)) {\n          handlers.forEach(handler => handler.handleEvent(event));\n        }\n      });\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState, RippleConfig} from './ripple-ref';\nimport {RippleEventManager} from './ripple-event-manager';\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/** Interfaces the defines ripple element transition event listeners. */\ninterface RippleEventListeners {\n  onTransitionEnd: EventListener;\n  onTransitionCancel: EventListener;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150,\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer implements EventListenerObject {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /**\n   * Map of currently active ripple references.\n   * The ripple reference is mapped to its element event listeners.\n   * The reason why `| null` is used is that event listeners are added only\n   * when the condition is truthy (see the `_startFadeOutTransition` method).\n   */\n  private _activeRipples = new Map<RippleRef, RippleEventListeners | null>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Whether pointer-up event listeners have been registered. */\n  private _pointerUpEventsRegistered = false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  private static _eventManager = new RippleEventManager();\n\n  constructor(\n    private _target: RippleTarget,\n    private _ngZone: NgZone,\n    elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n    private _platform: Platform,\n  ) {\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = (this._containerRect =\n      this._containerRect || this._containerElement.getBoundingClientRect());\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss =\n      userTransitionProperty === 'none' ||\n      // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n      // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n      userTransitionDuration === '0s' ||\n      userTransitionDuration === '0s, 0s' ||\n      // If the container is 0x0, it's likely `display: none`.\n      (containerRect.width === 0 && containerRect.height === 0);\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    let eventListeners: RippleEventListeners | null = null;\n\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => this._finishRippleTransition(rippleRef);\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {onTransitionEnd, onTransitionCancel};\n      });\n    }\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event: Event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event as MouseEvent);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event as TouchEvent);\n    } else {\n      this._onPointerUp();\n    }\n\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement!.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  private _finishRippleTransition(rippleRef: RippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  private _startFadeOutTransition(rippleRef: RippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {persistent} = rippleRef.config;\n\n    rippleRef.state = RippleState.VISIBLE;\n\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  private _destroyRipple(rippleRef: RippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n    }\n    rippleRef.element.remove();\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown(event: MouseEvent) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent =\n      this._lastTouchStartEvent &&\n      Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart(event: TouchEvent) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches as TouchList | undefined;\n\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible =\n        ripple.state === RippleState.VISIBLE ||\n        (ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN);\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  private _getActiveRipples(): RippleRef[] {\n    return Array.from(this._activeRipples.keys());\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n\n    if (trigger) {\n      pointerDownEvents.forEach(type =>\n        RippleRenderer._eventManager.removeHandler(type, trigger, this),\n      );\n\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type =>\n          trigger.removeEventListener(type, this, passiveCapturingEventOptions),\n        );\n      }\n    }\n  }\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleAnimationConfig, RippleConfig, RippleRef} from './ripple-ref';\nimport {RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Default configuration for the animation duration of the ripples. There are two phases with\n   * different durations for the ripples: `enter` and `leave`. The durations will be overwritten\n   * by the value of `matRippleAnimation` or if the `NoopAnimationsModule` is included.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken<RippleGlobalOptions>(\n  'mat-ripple-global-options',\n);\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded',\n  },\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value) {\n      this.fadeOutAllNonPersistent();\n    }\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() {\n    return this._trigger || this._elementRef.nativeElement;\n  }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n  _isInitialized: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n  ) {\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Fades out all currently showing non-persistent ripple elements. */\n  fadeOutAllNonPersistent() {\n    this._rippleRenderer.fadeOutAllNonPersistent();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {\n        ...this._globalOptions.animation,\n        ...(this._animationMode === 'NoopAnimations' ? {enterDuration: 0, exitDuration: 0} : {}),\n        ...this.animation,\n      },\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates relative to the viewport.\n   * @param x Coordinate along the X axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param y Coordinate along the Y axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n    '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n   * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n   */\n  @Input() appearance: 'minimal' | 'full' = 'full';\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox';\nimport {MatCommonModule} from '../../common-behaviors/common-module';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox],\n})\nexport class MatPseudoCheckboxModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n  inertGroups?: boolean;\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT = new InjectionToken<MatOptionParentComponent>(\n  'MAT_OPTION_PARENT_COMPONENT',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  Optional,\n  InjectionToken,\n  booleanAttribute,\n} from '@angular/core';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_OPTGROUP = new InjectionToken<MatOptgroup>('MatOptgroup');\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-mdc-optgroup',\n    '[attr.role]': '_inert ? null : \"group\"',\n    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n    '[attr.aria-labelledby]': '_inert ? null : _labelId',\n  },\n  providers: [{provide: MAT_OPTGROUP, useExisting: MatOptgroup}],\n})\nexport class MatOptgroup {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** whether the option group is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n\n  /** Whether the group is in inert a11y mode. */\n  _inert: boolean;\n\n  constructor(@Inject(MAT_OPTION_PARENT_COMPONENT) @Optional() parent?: MatOptionParentComponent) {\n    this._inert = parent?.inertGroups ?? false;\n  }\n}\n", "<span\n  class=\"mat-mdc-optgroup-label\"\n  role=\"presentation\"\n  [class.mdc-list-item--disabled]=\"disabled\"\n  [id]=\"_labelId\">\n  <span class=\"mdc-list-item__primary-text\">{{ label }} <ng-content></ng-content></span>\n</span>\n\n<ng-content select=\"mat-option, ng-container\"></ng-content>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n  Optional,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ViewChild,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MAT_OPTGROUP, MatOptgroup} from './optgroup';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange<T = any> {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption<T>,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false,\n  ) {}\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[class.mdc-list-item--selected]': 'selected',\n    '[class.mat-mdc-option-multiple]': 'multiple',\n    '[class.mat-mdc-option-active]': 'active',\n    '[class.mdc-list-item--disabled]': 'disabled',\n    '[id]': 'id',\n    // Set aria-selected to false for non-selected items and true for selected items. Conform to\n    // [WAI ARIA Listbox authoring practices guide](\n    //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n    // selected option has either aria-selected or aria-checked  set to true. All options that are\n    // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n    // aria-selected implementation of Chips and List components.\n    //\n    // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n    // every option as \"selected\" (#21491).\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-mdc-option mdc-list-item',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** The form value of the option. */\n  @Input() value: T;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return (this.group && this.group.disabled) || this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple(): boolean {\n    return !!(this._parent && this._parent.disableRipple);\n  }\n\n  /** Whether to display checkmark for single-selection. */\n  get hideSingleSelectionIndicator(): boolean {\n    return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n  }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange<T>>();\n\n  /** Element containing the option's text. */\n  @ViewChild('text', {static: true}) _text: ElementRef<HTMLElement> | undefined;\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    public _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() @Inject(MAT_OPTGROUP) public group: MatOptgroup,\n  ) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._text?.nativeElement.textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(emitEvent = true): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(emitEvent = true): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n  // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n  // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        if (this._mostRecentViewValue) {\n          this._stateChanges.next();\n        }\n\n        this._mostRecentViewValue = viewValue;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange<T>(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n  optionIndex: number,\n  options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>,\n): number {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n  optionOffset: number,\n  optionHeight: number,\n  currentScrollPosition: number,\n  panelHeight: number,\n): number {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n", "<!-- Set aria-hidden=\"true\" to this DOM node and other decorative nodes in this file. This might\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\n@if (multiple) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        [state]=\"selected ? 'checked' : 'unchecked'\"\n        aria-hidden=\"true\"></mat-pseudo-checkbox>\n}\n\n<ng-content select=\"mat-icon\"></ng-content>\n\n<span class=\"mdc-list-item__primary-text\" #text><ng-content></ng-content></span>\n\n<!-- Render checkmark at the end for single-selection. -->\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        state=\"checked\"\n        aria-hidden=\"true\"\n        appearance=\"minimal\"></mat-pseudo-checkbox>\n}\n\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n@if (group && group._inert) {\n    <span class=\"cdk-visually-hidden\">({{ group.label }})</span>\n}\n\n<div class=\"mat-mdc-option-ripple mat-mdc-focus-indicator\" aria-hidden=\"true\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup],\n})\nexport class MatOptionModule {}\n\nexport * from './option';\nexport * from './optgroup';\nexport * from './option-parent';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ANIMATION_MODULE_TYPE,\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  inject,\n} from '@angular/core';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple} from '../ripple';\nimport {Platform} from '@angular/cdk/platform';\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {capture: true};\n\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n */\n@Injectable({providedIn: 'root'})\nexport class MatRippleLoader implements OnDestroy {\n  private _document = inject(DOCUMENT, {optional: true});\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {optional: true});\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n\n  constructor() {\n    this._ngZone.runOutsideAngular(() => {\n      for (const event of rippleInteractionEvents) {\n        this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    for (const event of rippleInteractionEvents) {\n      this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n    }\n  }\n\n  /**\n   * Configures the ripple that will be rendered by the ripple loader.\n   *\n   * Stores the given information about how the ripple should be configured on the host\n   * element so that it can later be retrived & used when the ripple is actually created.\n   */\n  configureRipple(\n    host: HTMLElement,\n    config: {\n      className?: string;\n      centered?: boolean;\n      disabled?: boolean;\n    },\n  ): void {\n    // Indicates that the ripple has not yet been rendered for this component.\n    host.setAttribute(matRippleUninitialized, '');\n\n    // Store the additional class name(s) that should be added to the ripple element.\n    if (config.className || !host.hasAttribute(matRippleClassName)) {\n      host.setAttribute(matRippleClassName, config.className || '');\n    }\n\n    // Store whether the ripple should be centered.\n    if (config.centered) {\n      host.setAttribute(matRippleCentered, '');\n    }\n\n    if (config.disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    }\n  }\n\n  /** Returns the ripple instance for the given host element. */\n  getRipple(host: HTMLElement): MatRipple | undefined {\n    if ((host as any).matRipple) {\n      return (host as any).matRipple;\n    }\n    return this.createRipple(host);\n  }\n\n  /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n  setDisabled(host: HTMLElement, disabled: boolean): void {\n    const ripple = (host as any).matRipple as MatRipple | undefined;\n\n    // If the ripple has already been instantiated, just disable it.\n    if (ripple) {\n      ripple.disabled = disabled;\n      return;\n    }\n\n    // Otherwise, set an attribute so we know what the\n    // disabled state should be when the ripple is initialized.\n    if (disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    } else {\n      host.removeAttribute(matRippleDisabled);\n    }\n  }\n\n  /** Handles creating and attaching component internals when a component it is initially interacted with. */\n  private _onInteraction = (event: Event) => {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const eventTarget = event.target as HTMLElement;\n\n    // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n\n    const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n    if (element) {\n      this.createRipple(element as HTMLElement);\n    }\n  };\n\n  /** Creates a MatRipple and appends it to the given element. */\n  createRipple(host: HTMLElement): MatRipple | undefined {\n    if (!this._document) {\n      return;\n    }\n\n    // Create the ripple element.\n    host.querySelector('.mat-ripple')?.remove();\n    const rippleEl = this._document!.createElement('span');\n    rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName)!);\n    host.append(rippleEl);\n\n    // Create the MatRipple.\n    const ripple = new MatRipple(\n      new ElementRef(rippleEl),\n      this._ngZone,\n      this._platform,\n      this._globalRippleOptions ? this._globalRippleOptions : undefined,\n      this._animationMode ? this._animationMode : undefined,\n    );\n    ripple._isInitialized = true;\n    ripple.trigger = host;\n    ripple.centered = host.hasAttribute(matRippleCentered);\n    ripple.disabled = host.hasAttribute(matRippleDisabled);\n    this.attachRipple(host, ripple);\n    return ripple;\n  }\n\n  attachRipple(host: Element, ripple: MatRipple): void {\n    host.removeAttribute(matRippleUninitialized);\n    (host as any).matRipple = ripple;\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  booleanAttribute,\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {MatRipple, MatRippleLoader} from '@angular/material/core';\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n  '[class]': 'color ? \"mat-\" + color : \"\"',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {attribute: string; mdcClasses: string[]}[] = [\n  {\n    attribute: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    attribute: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    attribute: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    attribute: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    attribute: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    attribute: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    attribute: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  },\n];\n\n/** Base class for all buttons.  */\n@Directive()\nexport class MatButtonBase implements AfterViewInit, OnDestroy {\n  private readonly _focusMonitor = inject(FocusMonitor);\n\n  /**\n   * Handles the lazy creation of the MatButton ripple.\n   * Used to improve initial load time of large applications.\n   */\n  _rippleLoader: MatRippleLoader = inject(MatRippleLoader);\n\n  /** Whether this button is a FAB. Used to apply the correct class on the ripple. */\n  _isFab = false;\n\n  /**\n   * Reference to the MatRipple instance of the button.\n   * @deprecated Considered an implementation detail. To be removed.\n   * @breaking-change 17.0.0\n   */\n  get ripple(): MatRipple {\n    return this._rippleLoader?.getRipple(this._elementRef.nativeElement)!;\n  }\n  set ripple(v: MatRipple) {\n    this._rippleLoader?.attachRipple(this._elementRef.nativeElement, v);\n  }\n\n  /** Theme color palette of the button */\n  @Input() color?: string | null;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input({transform: booleanAttribute})\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: any) {\n    this._disableRipple = value;\n    this._updateRippleDisabled();\n  }\n  private _disableRipple: boolean = false;\n\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: any) {\n    this._disabled = value;\n    this._updateRippleDisabled();\n  }\n  private _disabled: boolean = false;\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _platform: Platform,\n    public _ngZone: NgZone,\n    public _animationMode?: string,\n  ) {\n    this._rippleLoader?.configureRipple(this._elementRef.nativeElement, {\n      className: 'mat-mdc-button-ripple',\n    });\n\n    const element = this._elementRef.nativeElement;\n    const classList = (element as HTMLElement).classList;\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const {attribute, mdcClasses} of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (element.hasAttribute(attribute)) {\n        classList.add(...mdcClasses);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (_origin) {\n      this._focusMonitor.focusVia(this._elementRef.nativeElement, _origin, options);\n    } else {\n      this._elementRef.nativeElement.focus(options);\n    }\n  }\n\n  private _updateRippleDisabled(): void {\n    this._rippleLoader?.setDisabled(\n      this._elementRef.nativeElement,\n      this.disableRipple || this.disabled,\n    );\n  }\n}\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n  '[class]': 'color ? \"mat-\" + color : \"\"',\n};\n\n/**\n * Anchor button base.\n */\n@Directive()\nexport class MatAnchorBase extends MatButtonBase implements OnInit, OnDestroy {\n  @Input({\n    transform: (value: unknown) => {\n      return value == null ? undefined : numberAttribute(value);\n    },\n  })\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone, animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  ngOnInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n    });\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatAnchorBase, MatButtonBase} from './button-base';\n\n/**\n * Material Design button component. Users interact with a button to perform an action.\n * See https://material.io/components/buttons\n *\n * The `MatButton` class applies to native button elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `\n    button[mat-button], button[mat-raised-button], button[mat-flat-button],\n    button[mat-stroked-button]\n  `,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends MatButtonBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design button component for anchor elements. Anchor elements are used to provide\n * links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons\n *\n * The `MatAnchor` class applies to native anchor elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: MAT_ANCHOR_HOST,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatAnchorBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n", "<span\n    class=\"mat-mdc-button-persistent-ripple\"\n    [class.mdc-button__ripple]=\"!_isFab\"\n    [class.mdc-fab__ripple]=\"_isFab\"></span>\n\n<ng-content select=\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\">\n</ng-content>\n\n<span class=\"mdc-button__label\"><ng-content></ng-content></span>\n\n<ng-content select=\".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\">\n</ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n  booleanAttribute,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {MatAnchor} from './button';\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatButtonBase} from './button-base';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default FAB options that can be overridden. */\nexport interface MatFabDefaultOptions {\n  color?: ThemePalette;\n}\n\n/** Injection token to be used to override the default options for FAB. */\nexport const MAT_FAB_DEFAULT_OPTIONS = new InjectionToken<MatFabDefaultOptions>(\n  'mat-mdc-fab-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_FAB_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_FAB_DEFAULT_OPTIONS_FACTORY(): MatFabDefaultOptions {\n  return {\n    // The FAB by default has its color set to accent.\n    color: 'accent',\n  };\n}\n\n// Default FAB configuration.\nconst defaults = MAT_FAB_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Material Design floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabButton` class has two appearances: normal and extended.\n */\n@Component({\n  selector: `button[mat-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  host: {\n    ...MAT_BUTTON_HOST,\n    '[class.mdc-fab--extended]': 'extended',\n    '[class.mat-mdc-extended-fab]': 'extended',\n  },\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabButton extends MatButtonBase {\n  override _isFab = true;\n\n  @Input({transform: booleanAttribute}) extended: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design mini floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n */\n@Component({\n  selector: `button[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMiniFabButton extends MatButtonBase {\n  override _isFab = true;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabAnchor` class has two appearances: normal and extended.\n */\n@Component({\n  selector: `a[mat-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  host: {\n    ...MAT_ANCHOR_HOST,\n    '[class.mdc-fab--extended]': 'extended',\n    '[class.mat-mdc-extended-fab]': 'extended',\n  },\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabAnchor extends MatAnchor {\n  override _isFab = true;\n\n  @Input({transform: booleanAttribute}) extended: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design mini floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n */\n@Component({\n  selector: `a[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMiniFabAnchor extends MatAnchor {\n  override _isFab = true;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatAnchorBase, MatButtonBase} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'icon-button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n\n    this._rippleLoader.configureRipple(this._elementRef.nativeElement, {centered: true});\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n", "<span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span>\n\n<ng-content></ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton, MatMiniFabAnchor, MatMiniFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n})\nexport class MatButtonModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error(\n    'Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n      'a ComponentPortal or a TemplatePortal.',\n  );\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  TemplateRef,\n  ViewContainerRef,\n  ElementRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n  ComponentFactoryResolver,\n} from '@angular/core';\nimport {\n  throwNullPortalOutletError,\n  throwPortalAlreadyAttachedError,\n  throwNoPortalAttachedError,\n  throwNullPortalError,\n  throwPortalOutletAlreadyDisposedError,\n  throwUnknownPortalTypeError,\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return <T>host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * Defaults to using the resolver from the outlet that the portal is attached to.\n   */\n  componentFactoryResolver?: ComponentFactoryResolver | null;\n\n  /**\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n   */\n  projectableNodes?: Node[][] | null;\n\n  constructor(\n    component: ComponentType<T>,\n    viewContainerRef?: ViewContainerRef | null,\n    injector?: Injector | null,\n    componentFactoryResolver?: ComponentFactoryResolver | null,\n    projectableNodes?: Node[][] | null,\n  ) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.projectableNodes = projectableNodes;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    public templateRef: TemplateRef<C>,\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    public viewContainerRef: ViewContainerRef,\n    /** Contextual data to be passed in to the embedded view. */\n    public context?: C,\n    /** The injector to use for the embedded view. */\n    public injector?: Injector,\n  ) {\n    super();\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  override attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  override detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, DomPortal, TemplatePortal} from './portal';\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  private _document: Document;\n\n  /**\n   * @param outletElement Element into which the content is projected.\n   * @param _componentFactoryResolver Used to resolve the component factory.\n   *   Only required when attaching component portals.\n   * @param _appRef Reference to the application. Only used in component portals when there\n   *   is no `ViewContainerRef` available.\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n   *   have one. Only used for component portals.\n   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n   *   become a required parameter.\n   */\n  constructor(\n    /** Element into which the content is projected. */\n    public outletElement: Element,\n    private _componentFactoryResolver?: ComponentFactoryResolver,\n    private _appRef?: ApplicationRef,\n    private _defaultInjector?: Injector,\n\n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document?: any,\n  ) {\n    super();\n    this._document = _document;\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver)!;\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n      throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n    }\n\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n        componentFactory,\n        portal.viewContainerRef.length,\n        portal.injector || portal.viewContainerRef.injector,\n        portal.projectableNodes || undefined,\n      );\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n\n      componentRef = componentFactory.create(\n        portal.injector || this._defaultInjector || Injector.NULL,\n      );\n      this._appRef!.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (this._appRef!.viewCount > 0) {\n          this._appRef!.detachView(componentRef.hostView);\n        }\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n\n    this._attachedPortal = portal;\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 10.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    element.parentNode!.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  override dispose(): void {\n    super.dispose();\n    this.outletElement.remove();\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [\n    {\n      provide: CdkPortal,\n      useExisting: TemplatePortalDirective,\n    },\n  ],\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n  inputs: ['portal: cdkPortalOutlet'],\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _document: Document;\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _viewContainerRef: ViewContainerRef,\n\n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    @Inject(DOCUMENT) _document?: any,\n  ) {\n    super();\n    this._document = _document;\n  }\n\n  /** Portal associated with the Portal outlet. */\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null | undefined | '') {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal || null;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() readonly attached: EventEmitter<CdkPortalOutletAttachedRef> =\n    new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef =\n      portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    const ref = viewContainerRef.createComponent(\n      componentFactory,\n      viewContainerRef.length,\n      portal.injector || viewContainerRef.injector,\n      portal.projectableNodes || undefined,\n    );\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 9.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode!.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (\n      nativeElement.nodeType === nativeElement.ELEMENT_NODE\n        ? nativeElement\n        : nativeElement.parentNode!\n    ) as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: ['portal: cdkPortalHost'],\n  providers: [\n    {\n      provide: CdkPortalOutlet,\n      useExisting: PortalHostDirective,\n    },\n  ],\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n@NgModule({\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nexport class PortalInjector implements Injector {\n  constructor(private _parentInjector: Injector, private _customTokens: WeakMap<any, any>) {}\n\n  get(token: any, notFoundValue?: any): any {\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConnectableObservable, Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: readonly T[] | Observable<readonly T[]>) {\n    super();\n  }\n\n  connect(): Observable<readonly T[]> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation,\n} from './view-repeater';\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n  implements _ViewRepeater<T, R, C>\n{\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ) {\n    changes.forEachOperation(\n      (\n        record: IterableChangeRecord<R>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        let view: EmbeddedViewRef<C> | undefined;\n        let operation: _ViewRepeaterOperation;\n        if (record.previousIndex == null) {\n          const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = viewContainerRef.createEmbeddedView(\n            insertContext.templateRef,\n            insertContext.context,\n            insertContext.index,\n          );\n          operation = _ViewRepeaterOperation.INSERTED;\n        } else if (currentIndex == null) {\n          viewContainerRef.remove(adjustedPreviousIndex!);\n          operation = _ViewRepeaterOperation.REMOVED;\n        } else {\n          view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n          viewContainerRef.move(view!, currentIndex);\n          operation = _ViewRepeaterOperation.MOVED;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view?.context,\n            operation,\n            record,\n          });\n        }\n      },\n    );\n  }\n\n  detach() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation,\n} from './view-repeater';\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n  implements _ViewRepeater<T, R, C>\n{\n  /**\n   * The size of the cache used to store unused views.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n   */\n  viewCacheSize: number = 20;\n\n  /**\n   * View cache that stores embedded view instances that have been previously stamped out,\n   * but don't are not currently rendered. The view repeater will reuse these views rather than\n   * creating brand new ones.\n   *\n   * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n   */\n  private _viewCache: EmbeddedViewRef<C>[] = [];\n\n  /** Apply changes to the DOM. */\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation(\n      (\n        record: IterableChangeRecord<R>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        let view: EmbeddedViewRef<C> | undefined;\n        let operation: _ViewRepeaterOperation;\n        if (record.previousIndex == null) {\n          // Item added.\n          const viewArgsFactory = () =>\n            itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = this._insertView(\n            viewArgsFactory,\n            currentIndex!,\n            viewContainerRef,\n            itemValueResolver(record),\n          );\n          operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n        } else if (currentIndex == null) {\n          // Item removed.\n          this._detachAndCacheView(adjustedPreviousIndex!, viewContainerRef);\n          operation = _ViewRepeaterOperation.REMOVED;\n        } else {\n          // Item moved.\n          view = this._moveView(\n            adjustedPreviousIndex!,\n            currentIndex!,\n            viewContainerRef,\n            itemValueResolver(record),\n          );\n          operation = _ViewRepeaterOperation.MOVED;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view?.context,\n            operation,\n            record,\n          });\n        }\n      },\n    );\n  }\n\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n    this._viewCache = [];\n  }\n\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  private _insertView(\n    viewArgsFactory: () => _ViewRepeaterItemInsertArgs<C>,\n    currentIndex: number,\n    viewContainerRef: ViewContainerRef,\n    value: T,\n  ): EmbeddedViewRef<C> | undefined {\n    const cachedView = this._insertViewFromCache(currentIndex!, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(\n      viewArgs.templateRef,\n      viewArgs.context,\n      viewArgs.index,\n    );\n  }\n\n  /** Detaches the view at the given index and inserts into the view cache. */\n  private _detachAndCacheView(index: number, viewContainerRef: ViewContainerRef) {\n    const detachedView = viewContainerRef.detach(index) as EmbeddedViewRef<C>;\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n\n  /** Moves view at the previous index to the current index. */\n  private _moveView(\n    adjustedPreviousIndex: number,\n    currentIndex: number,\n    viewContainerRef: ViewContainerRef,\n    value: T,\n  ): EmbeddedViewRef<C> {\n    const view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  private _maybeCacheView(view: EmbeddedViewRef<C>, viewContainerRef: ViewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(\n    index: number,\n    viewContainerRef: ViewContainerRef,\n  ): EmbeddedViewRef<C> | null {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  readonly changed = new Subject<SelectionChange<T>>();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true,\n    public compareWith?: (o1: T, o2: T) => boolean,\n  ) {\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  select(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  deselect(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  setSelection(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues\n      .filter(value => !newSelectedSet.has(value))\n      .forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  toggle(value: T): boolean | void {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  clear(flushEvent = true): boolean | void {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(this._getConcreteValue(value));\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit,\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    value = this._getConcreteValue(value);\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    value = this._getConcreteValue(value);\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n\n  /** Whether there are queued up change to be emitted. */\n  private _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n\n  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n  private _getConcreteValue(inputValue: T): T {\n    if (!this.compareWith) {\n      return inputValue;\n    } else {\n      for (let selectedValue of this._selection) {\n        if (this.compareWith!(inputValue, selectedValue)) {\n          return selectedValue;\n        }\n      }\n      return inputValue;\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  InjectionToken,\n  IterableChangeRecord,\n  IterableChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * The context for an embedded view in the repeater's view container.\n *\n * @template T The type for the embedded view's $implicit property.\n */\nexport interface _ViewRepeaterItemContext<T> {\n  $implicit?: T;\n}\n\n/**\n * The arguments needed to construct an embedded view for an item in a view\n * container.\n *\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemInsertArgs<C> {\n  templateRef: TemplateRef<C>;\n  context?: C;\n  index?: number;\n}\n\n/**\n * A factory that derives the embedded view context for an item in a view\n * container.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> = (\n  record: IterableChangeRecord<R>,\n  adjustedPreviousIndex: number | null,\n  currentIndex: number | null,\n) => _ViewRepeaterItemInsertArgs<C>;\n\n/**\n * Extracts the value of an item from an {@link IterableChangeRecord}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n */\nexport type _ViewRepeaterItemValueResolver<T, R> = (record: IterableChangeRecord<R>) => T;\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nexport const enum _ViewRepeaterOperation {\n  /** The content of an existing view was replaced with another item. */\n  REPLACED,\n  /** A new view was created with `createEmbeddedView`. */\n  INSERTED,\n  /** The position of a view changed, but the content remains the same. */\n  MOVED,\n  /** A view was detached from the view container. */\n  REMOVED,\n}\n\n/**\n * Meta data describing the state of a view after it was updated by a\n * {@link _ViewRepeater}.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemChange<R, C> {\n  /** The view's context after it was changed. */\n  context?: C;\n  /** Indicates how the view was changed. */\n  operation: _ViewRepeaterOperation;\n  /** The view's corresponding change record. */\n  record: IterableChangeRecord<R>;\n}\n\n/**\n * Type for a callback to be executed after a view has changed.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemChanged<R, C> = (change: _ViewRepeaterItemChange<R, C>) => void;\n\n/**\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ): void;\n\n  detach(): void;\n}\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\n  _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>\n>('_ViewRepeater');\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport type {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY = new InjectionToken<VirtualScrollStrategy>(\n  'VIRTUAL_SCROLL_STRATEGY',\n);\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private readonly _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    /* no-op */\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    // Prevent NaN as result when dividing by zero.\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(\n        0,\n        Math.min(firstVisibleIndex, dataLength - maxVisibleItems),\n      );\n\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(\n        dataLength,\n        Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize),\n      );\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(\n            0,\n            Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize),\n          );\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  standalone: true,\n  providers: [\n    {\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n    },\n  ],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number {\n    return this._itemSize;\n  }\n  set itemSize(value: NumberInput) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number {\n    return this._minBufferPx;\n  }\n  set minBufferPx(value: NumberInput) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number {\n    return this._maxBufferPx;\n  }\n  set maxBufferPx(value: NumberInput) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy = new FixedSizeVirtualScrollStrategy(\n    this.itemSize,\n    this.minBufferPx,\n    this.maxBufferPx,\n  );\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport type {CdkScrollable} from './scrollable';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(DOCUMENT) document: any,\n  ) {\n    this._document = document;\n  }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private readonly _scrolled = new Subject<CdkScrollable | void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(\n        scrollable,\n        scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)),\n      );\n    }\n  }\n\n  /**\n   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable | void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription =\n        auditTimeInMs > 0\n          ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n          : this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(\n    elementOrElementRef: ElementRef | HTMLElement,\n    auditTimeInMs?: number,\n  ): Observable<CdkScrollable | void> {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(\n      filter(target => {\n        return !target || ancestors.indexOf(target) > -1;\n      }),\n    );\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(\n    scrollable: CdkScrollable,\n    elementOrElementRef: ElementRef | HTMLElement,\n  ): boolean {\n    let element: HTMLElement | null = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while ((element = element!.parentElement));\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  getRtlScrollAxisType,\n  RtlScrollAxisType,\n  supportsScrollBehavior,\n} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]',\n  standalone: true,\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  protected readonly _destroyed = new Subject<void>();\n\n  protected _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n    this.ngZone.runOutsideAngular(() =>\n      fromEvent(this.elementRef.nativeElement, 'scroll')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(observer),\n    ),\n  );\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected scrollDispatcher: ScrollDispatcher,\n    protected ngZone: NgZone,\n    @Optional() protected dir?: Directionality,\n  ) {}\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n        el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n          el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n          el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number} | null;\n\n  /** Stream of viewport change events. */\n  private readonly _change = new Subject<Event>();\n\n  /** Event listener that will be used to handle the viewport change events. */\n  private _changeListener = (event: Event) => {\n    this._change.next(event);\n  };\n\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(\n    private _platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(DOCUMENT) document: any,\n  ) {\n    this._document = document;\n\n    ngZone.runOutsideAngular(() => {\n      if (_platform.isBrowser) {\n        const window = this._getWindow();\n\n        // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n        window.addEventListener('resize', this._changeListener);\n        window.addEventListener('orientationchange', this._changeListener);\n      }\n\n      // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n      this.change().subscribe(() => (this._viewportSize = null));\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._platform.isBrowser) {\n      const window = this._getWindow();\n      window.removeEventListener('resize', this._changeListener);\n      window.removeEventListener('orientationchange', this._changeListener);\n    }\n\n    this._change.complete();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number; height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize!.width, height: this._viewportSize!.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._document;\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top =\n      -documentRect.top ||\n      document.body.scrollTop ||\n      window.scrollY ||\n      documentElement.scrollTop ||\n      0;\n\n    const left =\n      -documentRect.left ||\n      document.body.scrollLeft ||\n      window.scrollX ||\n      documentElement.scrollLeft ||\n      0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * This stream emits outside of the Angular zone.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser\n      ? {width: window.innerWidth, height: window.innerHeight}\n      : {width: 0, height: 0};\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, ElementRef, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable} from './scrollable';\n\nexport const VIRTUAL_SCROLLABLE = new InjectionToken<CdkVirtualScrollable>('VIRTUAL_SCROLLABLE');\n\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\n@Directive()\nexport abstract class CdkVirtualScrollable extends CdkScrollable {\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    scrollDispatcher: ScrollDispatcher,\n    ngZone: NgZone,\n    @Optional() dir?: Directionality,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n  }\n\n  /**\n   * Measure the viewport size for the provided orientation.\n   *\n   * @param orientation The orientation to measure the size from.\n   */\n  measureViewportSize(orientation: 'horizontal' | 'vertical') {\n    const viewportEl = this.elementRef.nativeElement;\n    return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /**\n   * Measure the bounding ClientRect size including the scroll offset.\n   *\n   * @param from The edge to measure from.\n   */\n  abstract measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  inject,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Subject,\n  Observer,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {ViewportRuler} from './viewport-ruler';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n  typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  providers: [\n    {\n      provide: CdkScrollable,\n      useFactory: (\n        virtualScrollable: CdkVirtualScrollable | null,\n        viewport: CdkVirtualScrollViewport,\n      ) => virtualScrollable || viewport,\n      deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n    },\n  ],\n})\nexport class CdkVirtualScrollViewport extends CdkVirtualScrollable implements OnInit, OnDestroy {\n  private _platform = inject(Platform);\n\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private readonly _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private readonly _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n   * will be removed.\n   */\n  @Input({transform: booleanAttribute}) appendOnly: boolean = false;\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output()\n  readonly scrolledIndexChange: Observable<number> = new Observable((observer: Observer<number>) =>\n    this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n      Promise.resolve().then(() => this.ngZone.run(() => observer.next(index))),\n    ),\n  );\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  readonly renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject;\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = '';\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = '';\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualScrollRepeater. */\n  private _forOf: CdkVirtualScrollRepeater<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  constructor(\n    public override elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    ngZone: NgZone,\n    @Optional()\n    @Inject(VIRTUAL_SCROLL_STRATEGY)\n    private _scrollStrategy: VirtualScrollStrategy,\n    @Optional() dir: Directionality,\n    scrollDispatcher: ScrollDispatcher,\n    viewportRuler: ViewportRuler,\n    @Optional() @Inject(VIRTUAL_SCROLLABLE) public scrollable: CdkVirtualScrollable,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n\n    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    this._viewportChanges = viewportRuler.change().subscribe(() => {\n      this.checkViewportSize();\n    });\n\n    if (!this.scrollable) {\n      // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n      this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n      this.scrollable = this;\n    }\n  }\n\n  override ngOnInit() {\n    // Scrolling depends on the element dimensions which we can't get during SSR.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (this.scrollable === this) {\n      super.ngOnInit();\n    }\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() =>\n      Promise.resolve().then(() => {\n        this._measureViewportSize();\n        this._scrollStrategy.attach(this);\n\n        this.scrollable\n          .elementScrolled()\n          .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null),\n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER),\n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed),\n          )\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n        this._markChangeDetectionNeeded();\n      }),\n    );\n  }\n\n  override ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n  attach(forOf: CdkVirtualScrollRepeater<any>) {\n    if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  measureBoundingClientRectWithScrollOffset(from: 'left' | 'top' | 'right' | 'bottom'): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      if (this.appendOnly) {\n        range = {start: 0, end: Math.max(this._renderedRange.end, range.end)};\n      }\n      this._renderedRangeSubject.next((this._renderedRange = range));\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // In appendOnly, we always start from the top\n    offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollable.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the scrollable (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  override measureScrollOffset(\n    from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end',\n  ): number {\n    // This is to break the call cycle\n    let measureScrollOffset: InstanceType<typeof CdkVirtualScrollable>['measureScrollOffset'];\n    if (this.scrollable == this) {\n      measureScrollOffset = (_from: NonNullable<typeof from>) => super.measureScrollOffset(_from);\n    } else {\n      measureScrollOffset = (_from: NonNullable<typeof from>) =>\n        this.scrollable.measureScrollOffset(_from);\n    }\n\n    return Math.max(\n      0,\n      measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n        this.measureViewportOffset(),\n    );\n  }\n\n  /**\n   * Measures the offset of the viewport from the scrolling container\n   * @param from The edge to measure from.\n   */\n  measureViewportOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end') {\n    let fromRect: 'left' | 'top' | 'right' | 'bottom';\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const isRtl = this.dir?.value == 'rtl';\n    if (from == 'start') {\n      fromRect = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      fromRect = isRtl ? LEFT : RIGHT;\n    } else if (from) {\n      fromRect = from;\n    } else {\n      fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n    }\n\n    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n\n    return viewportClientRect - scrollerClientRect;\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() =>\n        Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }),\n      );\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight =\n      this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth =\n      this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n}\n", "<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class=\"cdk-virtual-scroll-spacer\"\n     [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeaterItemInsertArgs,\n} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {NumberInput, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation: 'horizontal' | 'vertical', direction: 'start' | 'end', node: Node) {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n  standalone: true,\n})\nexport class CdkVirtualForOf<T>\n  implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy\n{\n  /** Emits when the rendered view of the data changes. */\n  readonly viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private readonly _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // If value is an an NgIterable, convert it to an array.\n      this._dataSourceChanges.next(\n        new ArrayDataSource<T>(isObservable(value) ? value : Array.from(value || [])),\n      );\n    }\n  }\n\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn\n      ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n      : undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input()\n  get cdkVirtualForTemplateCacheSize(): number {\n    return this._viewRepeater.viewCacheSize;\n  }\n  set cdkVirtualForTemplateCacheSize(size: NumberInput) {\n    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n  }\n\n  /** Emits whenever the data in the current DataSource changes. */\n  readonly dataStream: Observable<readonly T[]> = this._dataSourceChanges.pipe(\n    // Start off with null `DataSource`.\n    startWith(null),\n    // Bundle up the previous and current data sources so we can work with both.\n    pairwise(),\n    // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n    // Replay the last emitted data when someone subscribes.\n    shareReplay(1),\n  );\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: readonly T[];\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    /** The view container to add items to. */\n    private _viewContainerRef: ViewContainerRef,\n    /** The template to use when stamping out new items. */\n    private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n    /** The set of available differs. */\n    private _differs: IterableDiffers,\n    /** The strategy used to render items in the virtual scroll viewport. */\n    @Inject(_VIEW_REPEATER_STRATEGY)\n    private _viewRepeater: _RecycleViewRepeaterStrategy<T, T, CdkVirtualForOfContext<T>>,\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n    ngZone: NgZone,\n  ) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      if (this.viewChange.observers.length) {\n        ngZone.run(() => this.viewChange.next(this._renderedRange));\n      }\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (\n      (range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all the views, find the first and land node and compute the size by subtracting\n    // the top of the first node from the bottom of the last one.\n    let firstNode: HTMLElement | undefined;\n    let lastNode: HTMLElement | undefined;\n\n    // Find the first node by starting from the beginning and going forwards.\n    for (let i = 0; i < rangeLen; i++) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        firstNode = lastNode = view.rootNodes[0];\n        break;\n      }\n    }\n\n    // Find the last node by starting from the end and going backwards.\n    for (let i = rangeLen - 1; i > -1; i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        lastNode = view.rootNodes[view.rootNodes.length - 1];\n        break;\n      }\n    }\n\n    return firstNode && lastNode\n      ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n      : 0;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next(undefined!);\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._viewRepeater.detach();\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      // Use a wrapper function for the `trackBy` so any new values are\n      // picked up automatically without having to recreate the differ.\n      this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n      });\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(\n    oldDs: DataSource<T> | null,\n    newDs: DataSource<T> | null,\n  ): Observable<readonly T[]> {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    this._viewRepeater.applyChanges(\n      changes,\n      this._viewContainerRef,\n      (\n        record: IterableChangeRecord<T>,\n        _adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => this._getEmbeddedViewArgs(record, currentIndex!),\n      record => record.item,\n    );\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      >;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  private _getEmbeddedViewArgs(\n    record: IterableChangeRecord<T>,\n    index: number,\n  ): _ViewRepeaterItemInsertArgs<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return {\n      templateRef: this._template,\n      context: {\n        $implicit: record.item,\n        // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n        // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n        cdkVirtualForOf: this._cdkVirtualForOf!,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false,\n      },\n      index,\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, ElementRef, NgZone, Optional} from '@angular/core';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\n@Directive({\n  selector: '[cdkVirtualScrollingElement]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement}],\n  standalone: true,\n  host: {\n    'class': 'cdk-virtual-scrollable',\n  },\n})\nexport class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n  constructor(\n    elementRef: ElementRef,\n    scrollDispatcher: ScrollDispatcher,\n    ngZone: NgZone,\n    @Optional() dir: Directionality,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return (\n      this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n      this.measureScrollOffset(from)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, ElementRef, NgZone, Optional} from '@angular/core';\nimport {fromEvent, Observable, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow}],\n  standalone: true,\n})\nexport class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n  protected override _elementScrolled: Observable<Event> = new Observable(\n    (observer: Observer<Event>) =>\n      this.ngZone.runOutsideAngular(() =>\n        fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer),\n      ),\n  );\n\n  constructor(scrollDispatcher: ScrollDispatcher, ngZone: NgZone, @Optional() dir: Directionality) {\n    super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\nimport {CdkVirtualScrollableElement} from './virtual-scrollable-element';\nimport {CdkVirtualScrollableWindow} from './virtual-scrollable-window';\n\n@NgModule({\n  exports: [CdkScrollable],\n  imports: [CdkScrollable],\n})\nexport class CdkScrollableModule {}\n\n/**\n * @docs-primary-export\n */\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkVirtualScrollViewport,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n})\nexport class ScrollingModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: {top: number; left: number};\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayRef) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {filter} from 'rxjs/operators';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0).pipe(\n      filter(scrollable => {\n        return (\n          !scrollable ||\n          !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement)\n        );\n      }),\n    );\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/** Equivalent of `ClientRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<ClientRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any,\n  ) {\n    this._document = document;\n  }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) =>\n    new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) =>\n    new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config) as Iterable<keyof OverlayConfig> &\n        (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[],\n  ) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n    /** The position used as a result of this change. */\n    public connectionPair: ConnectionPositionPair,\n    /** @docs-private */\n    public scrollableViewProperties: ScrollingVisibility,\n  ) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"top\", \"bottom\" or \"center\".`,\n    );\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"start\", \"end\" or \"center\".`,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  protected _document: Document;\n  protected _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional} from '@angular/core';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    @Optional() private _ngZone?: NgZone,\n  ) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() =>\n          this._document.body.addEventListener('keydown', this._keydownListener),\n        );\n      } else {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n      }\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        const keydownEvents = overlays[i]._keydownEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n          this._ngZone.run(() => keydownEvents.next(event));\n        } else {\n          keydownEvents.next(event);\n        }\n        break;\n      }\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional} from '@angular/core';\nimport {Platform, _getEventTarget} from '@angular/cdk/platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n  private _pointerDownEventTarget: EventTarget | null;\n\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    private _platform: Platform,\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    @Optional() private _ngZone?: NgZone,\n  ) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n      } else {\n        this._addEventListeners(body);\n      }\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('pointerdown', this._pointerDownListener, true);\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  private _addEventListeners(body: HTMLElement): void {\n    body.addEventListener('pointerdown', this._pointerDownListener, true);\n    body.addEventListener('click', this._clickListener, true);\n    body.addEventListener('auxclick', this._clickListener, true);\n    body.addEventListener('contextmenu', this._clickListener, true);\n  }\n\n  /** Store pointerdown event target to track origin of click. */\n  private _pointerDownListener = (event: PointerEvent) => {\n    this._pointerDownEventTarget = _getEventTarget(event);\n  };\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    const target = _getEventTarget(event);\n    // In case of a click event, we want to check the origin of the click\n    // (e.g. in case where a user starts a click inside the overlay and\n    // releases the click outside of it).\n    // This is done by using the event target of the preceding pointerdown event.\n    // Every click event caused by a pointer device has a preceding pointerdown\n    // event, unless the click was programmatically triggered (e.g. in a unit test).\n    const origin =\n      event.type === 'click' && this._pointerDownEventTarget\n        ? this._pointerDownEventTarget\n        : target;\n    // Reset the stored pointerdown event target, to avoid having it interfere\n    // in subsequent events.\n    this._pointerDownEventTarget = null;\n\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n      // and proceed with the next overlay\n      if (\n        overlayRef.overlayElement.contains(target as Node) ||\n        overlayRef.overlayElement.contains(origin as Node)\n      ) {\n        break;\n      }\n\n      const outsidePointerEvents = overlayRef._outsidePointerEvents;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.run(() => outsidePointerEvents.next(event));\n      } else {\n        outsidePointerEvents.next(event);\n      }\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {Platform, _isTestEnvironment} from '@angular/cdk/platform';\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any, protected _platform: Platform) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._containerElement?.remove();\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(\n        `.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`,\n      );\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropTimeout: number | undefined;\n  private readonly _backdropClick = new Subject<MouseEvent>();\n  private readonly _attachments = new Subject<void>();\n  private readonly _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n  private _backdropTransitionendHandler = (event: TransitionEvent) => {\n    this._disposeBackdrop(event.target as HTMLElement | null);\n  };\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  readonly _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  readonly _outsidePointerEvents = new Subject<MouseEvent>();\n\n  constructor(\n    private _portalOutlet: PortalOutlet,\n    private _host: HTMLElement,\n    private _pane: HTMLElement,\n    private _config: ImmutableObject<OverlayConfig>,\n    private _ngZone: NgZone,\n    private _keyboardDispatcher: OverlayKeyboardDispatcher,\n    private _document: Document,\n    private _location: Location,\n    private _outsideClickDispatcher: OverlayOutsideClickDispatcher,\n    private _animationsDisabled = false,\n  ) {\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    const attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n    if (typeof attachResult?.onDestroy === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this._disposeBackdrop(this._backdropElement);\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n    this._host?.remove();\n\n    this._previousHostParent = this._pane = this._host = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._animationsDisabled) {\n      this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    const backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    if (this._animationsDisabled) {\n      this._disposeBackdrop(backdropToDetach);\n      return;\n    }\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', this._backdropTransitionendHandler);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    this._backdropTimeout = this._ngZone.runOutsideAngular(() =>\n      setTimeout(() => {\n        this._disposeBackdrop(backdropToDetach);\n      }, 500),\n    );\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._host.remove();\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n\n  /** Removes a backdrop element from the DOM. */\n  private _disposeBackdrop(backdrop: HTMLElement | null) {\n    if (backdrop) {\n      backdrop.removeEventListener('click', this._backdropClickHandler);\n      backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n      backdrop.remove();\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement === backdrop) {\n        this._backdropElement = null;\n      }\n    }\n\n    if (this._backdropTimeout) {\n      clearTimeout(this._backdropTimeout);\n      this._backdropTimeout = undefined;\n    }\n  }\n}\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayRef} from '../overlay-ref';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin =\n  | ElementRef\n  | Element\n  | (Point & {\n      width?: number;\n      height?: number;\n    });\n\n/** Equivalent of `ClientRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<ClientRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: Dimensions;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: Dimensions;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: Dimensions;\n\n  /** Cached container dimensions */\n  private _containerRect: Dimensions;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private readonly _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number; y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: FlexibleConnectedPositionStrategyOrigin,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    private _platform: Platform,\n    private _overlayContainer: OverlayContainer,\n  ) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    if (\n      this._overlayRef &&\n      overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n          fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    const lastPosition = this._lastPosition;\n\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(\n    originRect: Dimensions,\n    containerRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n\n    return {x, y};\n  }\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n    originPoint: Point,\n    overlayRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(\n    point: Point,\n    rawOverlayRect: Dimensions,\n    viewport: Dimensions,\n    position: ConnectedPosition,\n  ): OverlayFit {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: Dimensions) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit =\n        fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit =\n        fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(\n    start: Point,\n    rawOverlayRect: Dimensions,\n    scrollPosition: ViewportScrollPosition,\n  ): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y,\n      };\n    }\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> = this._boundingBox!.querySelectorAll(\n      this._transformOriginSelector,\n    );\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.bottom - origin.y + viewport.top,\n        origin.y,\n      );\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n      (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n      (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.right - origin.x + viewport.left,\n        origin.x,\n      );\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds = this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): Dimensions {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin,\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): Dimensions {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width,\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurements determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: Dimensions;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: Dimensions;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(\n  destination: CSSStyleDeclaration,\n  source: CSSStyleDeclaration,\n): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number | string | null | undefined): number | null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect: Dimensions): Dimensions {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height),\n  };\n}\n\nexport const STANDARD_DROPDOWN_BELOW_POSITIONS: ConnectedPosition[] = [\n  {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n  {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'},\n  {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom'},\n];\n\nexport const STANDARD_DROPDOWN_ADJACENT_POSITIONS: ConnectedPosition[] = [\n  {originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top'},\n  {originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top'},\n  {originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom'},\n];\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '../overlay-ref';\nimport {PositionStrategy} from './position-strategy';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n  private _cssPosition = 'static';\n  private _topOffset = '';\n  private _bottomOffset = '';\n  private _alignItems = '';\n  private _xPosition = '';\n  private _xOffset = '';\n  private _width = '';\n  private _height = '';\n  private _isDisposed = false;\n\n  attach(overlayRef: OverlayRef): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  start(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  end(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally =\n      (width === '100%' || width === '100vw') &&\n      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically =\n      (height === '100%' || height === '100vh') &&\n      (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent =\n      parentStyles.alignItems =\n      styles.marginTop =\n      styles.marginBottom =\n      styles.marginLeft =\n      styles.marginRight =\n      styles.position =\n        '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayContainer} from '../overlay-container';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    private _platform: Platform,\n    private _overlayContainer: OverlayContainer,\n  ) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(\n    origin: FlexibleConnectedPositionStrategyOrigin,\n  ): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(\n      origin,\n      this._viewportRuler,\n      this._document,\n      this._platform,\n      this._overlayContainer,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  ANIMATION_MODULE_TYPE,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable({providedIn: 'root'})\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    public scrollStrategies: ScrollStrategyOptions,\n    private _overlayContainer: OverlayContainer,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _positionBuilder: OverlayPositionBuilder,\n    private _keyboardDispatcher: OverlayKeyboardDispatcher,\n    private _injector: Injector,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) private _document: any,\n    private _directionality: Directionality,\n    private _location: Location,\n    private _outsideClickDispatcher: OverlayOutsideClickDispatcher,\n    @Inject(ANIMATION_MODULE_TYPE) @Optional() private _animationsModuleType?: string,\n  ) {}\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(\n      portalOutlet,\n      host,\n      pane,\n      overlayConfig,\n      this._ngZone,\n      this._keyboardDispatcher,\n      this._document,\n      this._location,\n      this._outsideClickDispatcher,\n      this._animationsModuleType === 'NoopAnimations',\n    );\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(\n      pane,\n      this._componentFactoryResolver,\n      this._appRef,\n      this._injector,\n      this._document,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './position/flexible-connected-position-strategy';\nimport {RepositionScrollStrategy, ScrollStrategy} from './scroll/index';\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n  },\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'cdk-connected-overlay-scroll-strategy',\n);\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n  standalone: true,\n})\nexport class CdkOverlayOrigin {\n  constructor(\n    /** Reference to the element on which the directive is applied. */\n    public elementRef: ElementRef,\n  ) {}\n}\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay',\n  standalone: true,\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n  private _disposeOnNavigation = false;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin')\n  origin: CdkOverlayOrigin | FlexibleConnectedPositionStrategyOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number {\n    return this._offsetX;\n  }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() {\n    return this._offsetY;\n  }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string | string[];\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input({alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute})\n  hasBackdrop: boolean = false;\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input({alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute})\n  lockPosition: boolean = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input({alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute})\n  flexibleDimensions: boolean = false;\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input({alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute})\n  growAfterOpen: boolean = false;\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input({alias: 'cdkConnectedOverlayPush', transform: booleanAttribute}) push: boolean = false;\n\n  /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n  @Input({alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute})\n  get disposeOnNavigation(): boolean {\n    return this._disposeOnNavigation;\n  }\n  set disposeOnNavigation(value: boolean) {\n    this._disposeOnNavigation = value;\n  }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() readonly positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() readonly attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() readonly detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() readonly overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() readonly overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n    private _overlay: Overlay,\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    @Optional() private _dir: Directionality,\n  ) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = (this._position =\n      this.positionStrategy || this._createPositionStrategy());\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop,\n      disposeOnNavigation: this.disposeOnNavigation,\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay\n      .position()\n      .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  private _getFlexibleConnectedPositionStrategyOrigin(): FlexibleConnectedPositionStrategyOrigin {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this.positionChange.emit(position);\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n}\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n})\nexport class OverlayModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any, platform: Platform) {\n    super(_document, platform);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected override _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return (\n      _document.fullscreenElement ||\n      _document.webkitFullscreenElement ||\n      _document.mozFullScreenElement ||\n      _document.msFullscreenElement ||\n      null\n    );\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n      this.dismiss();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed;\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\n@Directive({\n  selector: `[matSnackBarLabel]`,\n  standalone: true,\n  host: {\n    'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n  },\n})\nexport class MatSnackBarLabel {}\n\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\n@Directive({\n  selector: `[matSnackBarActions]`,\n  standalone: true,\n  host: {\n    'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n  },\n})\nexport class MatSnackBarActions {}\n\n/** Directive that should be applied to each of the snack bar's action buttons. */\n@Directive({\n  selector: `[matSnackBarAction]`,\n  standalone: true,\n  host: {\n    'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n  },\n})\nexport class MatSnackBarAction {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Inject, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MatSnackBarAction, MatSnackBarActions, MatSnackBarLabel} from './snack-bar-content';\n\n/**\n * Interface for a simple snack bar component that has a message and a single action.\n */\nexport interface TextOnlySnackBar {\n  data: {message: string; action: string};\n  snackBarRef: MatSnackBarRef<TextOnlySnackBar>;\n  action: () => void;\n  hasAction: boolean;\n}\n\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  exportAs: 'matSnackBar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [MatButtonModule, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction, CommonModule],\n  standalone: true,\n  host: {\n    'class': 'mat-mdc-simple-snack-bar',\n  },\n})\nexport class SimpleSnackBar implements TextOnlySnackBar {\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) public data: {message: string; action: string},\n  ) {}\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n", "<div matSnackBarLabel>\n  {{data.message}}\n</div>\n\n@if (hasAction) {\n  <div matSnackBarActions>\n    <button mat-button matSnackBarAction (click)=\"action()\">\n      {{data.action}}\n    </button>\n  </div>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state(\n      'void, hidden',\n      style({\n        transform: 'scale(0.8)',\n        opacity: 0,\n      }),\n    ),\n    state(\n      'visible',\n      style({\n        transform: 'scale(1)',\n        opacity: 1,\n      }),\n    ),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition(\n      '* => void, * => hidden',\n      animate(\n        '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n        style({\n          opacity: 0,\n        }),\n      ),\n    ),\n  ]),\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  inject,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  DomPortal,\n  PortalModule,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {Observable, Subject} from 'rxjs';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {AnimationEvent} from '@angular/animations';\nimport {take} from 'rxjs/operators';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\nlet uniqueId = 0;\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'mat-snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  standalone: true,\n  imports: [PortalModule],\n  host: {\n    'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)',\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  private _document = inject(DOCUMENT);\n  private _trackedModals = new Set<Element>();\n\n  /** The number of milliseconds to wait before announcing the snack bar's content. */\n  private readonly _announceDelay: number = 150;\n\n  /** The timeout for announcing the snack bar's content. */\n  private _announceTimeoutId: number;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has announced to screen readers. */\n  readonly _onAnnounce: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<void> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** aria-live value for the live region. */\n  _live: AriaLivePoliteness;\n\n  /**\n   * Element that will have the `mdc-snackbar__label` class applied if the attached component\n   * or template does not have it. This ensures that the appropriate structure, typography, and\n   * color is applied to the attached view.\n   */\n  @ViewChild('label', {static: true}) _label: ElementRef;\n\n  /**\n   * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n   * JAWS does not read out aria-live message.\n   */\n  _role?: 'status' | 'alert';\n\n  /** Unique ID of the aria-live element. */\n  readonly _liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _platform: Platform,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig,\n  ) {\n    super();\n\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    const result = this._portalOutlet.attachComponentPortal(portal);\n    this._afterPortalAttached();\n    return result;\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n    this._afterPortalAttached();\n    return result;\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    const result = this._portalOutlet.attachDomPortal(portal);\n    this._afterPortalAttached();\n    return result;\n  };\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n      this._screenReaderAnnounce();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // It's common for snack bars to be opened by random outside calls like HTTP requests or\n    // errors. Run inside the NgZone to ensure that it functions correctly.\n    this._ngZone.run(() => {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden';\n\n      // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n      this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n      // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n      clearTimeout(this._announceTimeoutId);\n    });\n\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._clearFromModals();\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._onExit.next();\n        this._onExit.complete();\n      });\n    });\n  }\n\n  /**\n   * Called after the portal contents have been attached. Can be\n   * used to modify the DOM once it's guaranteed to be in place.\n   */\n  private _afterPortalAttached() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    this._exposeToModals();\n\n    // Check to see if the attached component or template uses the MDC template structure,\n    // specifically the MDC label. If not, the container should apply the MDC label class to this\n    // component's label container, which will apply MDC's label styles to the attached view.\n    const label = this._label.nativeElement;\n    const labelClass = 'mdc-snackbar__label';\n    label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live element if there is an\n   * `aria-modal` and the live element is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live element.\n   */\n  private _exposeToModals() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n    // `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const id = this._liveElementId;\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n      this._trackedModals.add(modal);\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n\n  /** Clears the references to the live element from any modals it was added to. */\n  private _clearFromModals() {\n    this._trackedModals.forEach(modal => {\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (ariaOwns) {\n        const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n\n        if (newValue.length > 0) {\n          modal.setAttribute('aria-owns', newValue);\n        } else {\n          modal.removeAttribute('aria-owns');\n        }\n      }\n    });\n    this._trackedModals.clear();\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  private _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement: HTMLElement | null = null;\n            if (\n              this._platform.isBrowser &&\n              document.activeElement instanceof HTMLElement &&\n              inertElement.contains(document.activeElement)\n            ) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n}\n", "<div class=\"mdc-snackbar__surface\">\n  <!--\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\n    the attached template/component does not contain it.\n  -->\n  <div class=\"mat-mdc-snack-bar-label\" #label>\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\n    <div aria-hidden=\"true\">\n      <ng-template cdkPortalOutlet></ng-template>\n    </div>\n\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\n    <div [attr.aria-live]=\"_live\" [attr.role]=\"_role\" [attr.id]=\"_liveElementId\"></div>\n  </div>\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {ComponentType, Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {SimpleSnackBar, TextOnlySnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {ComponentPortal, TemplatePortal} from '@angular/cdk/portal';\nimport {takeUntil} from 'rxjs/operators';\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken<MatSnackBarConfig>(\n  'mat-snack-bar-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** The component that should be rendered as the snack bar's simple component. */\n  simpleSnackBarComponent = SimpleSnackBar;\n\n  /** The container component that attaches the provided template or component. */\n  snackBarContainerComponent = MatSnackBarContainer;\n\n  /** The CSS class to apply for handset mode. */\n  handsetCssClass = 'mat-mdc-snack-bar-handset';\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _live: LiveAnnouncer,\n    private _injector: Injector,\n    private _breakpointObserver: BreakpointObserver,\n    @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n    @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig,\n  ) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T, D = any>(\n    component: ComponentType<T>,\n    config?: MatSnackBarConfig<D>,\n  ): MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(\n    template: TemplateRef<any>,\n    config?: MatSnackBarConfig,\n  ): MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(\n    message: string,\n    action: string = '',\n    config?: MatSnackBarConfig,\n  ): MatSnackBarRef<TextOnlySnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(\n    overlayRef: OverlayRef,\n    config: MatSnackBarConfig,\n  ): MatSnackBarContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatSnackBarConfig, useValue: config}],\n    });\n\n    const containerPortal = new ComponentPortal(\n      this.snackBarContainerComponent,\n      config.viewContainerRef,\n      injector,\n    );\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(\n    content: ComponentType<T> | TemplateRef<T>,\n    userConfig?: MatSnackBarConfig,\n  ): MatSnackBarRef<T | EmbeddedViewRef<any>> {\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef,\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver\n      .observe(Breakpoints.HandsetPortrait)\n      .pipe(takeUntil(overlayRef.detachments()))\n      .subscribe(state => {\n        overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n      });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage!, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft =\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl);\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(config: MatSnackBarConfig, snackBarRef: MatSnackBarRef<T>): Injector {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [\n        {provide: MatSnackBarRef, useValue: snackBarRef},\n        {provide: MAT_SNACK_BAR_DATA, useValue: config.data},\n      ],\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule} from '@angular/material/core';\n\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarAction, MatSnackBarActions, MatSnackBarLabel} from './snack-bar-content';\nimport {MatSnackBar} from './snack-bar';\n\nconst DIRECTIVES = [MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction];\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    MatButtonModule,\n    MatCommonModule,\n    SimpleSnackBar,\n    ...DIRECTIVES,\n  ],\n  exports: [MatCommonModule, ...DIRECTIVES],\n  providers: [MatSnackBar],\n})\nexport class MatSnackBarModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["hasV8BreakIterator", "Intl", "v8BreakIterator", "Platform", "constructor", "_platformId", "isBrowser", "isPlatformBrowser", "document", "EDGE", "test", "navigator", "userAgent", "TRIDENT", "BLINK", "window", "chrome", "CSS", "WEBKIT", "IOS", "FIREFOX", "ANDROID", "SAFARI", "ɵfac", "Platform_Factory", "t", "ɵɵinject", "PLATFORM_ID", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "PlatformModule", "ɵɵdefineNgModule", "type", "ɵɵdefineInjector", "NgModule", "supportsPassiveEvents", "supportsPassiveEventListeners", "window", "addEventListener", "Object", "defineProperty", "get", "normalizePassiveListenerOptions", "options", "capture", "rtlScrollAxisType", "scrollBehaviorSupported", "supportsScrollBehavior", "document", "Element", "documentElement", "style", "scrollToFunction", "prototype", "scrollTo", "test", "toString", "getRtlScrollAxisType", "scrollContainer", "createElement", "containerStyle", "dir", "width", "overflow", "visibility", "pointerEvents", "position", "content", "contentStyle", "height", "appendChild", "body", "scrollLeft", "remove", "shadowDomIsSupported", "_supportsShadowDom", "head", "createShadowRoot", "attachShadow", "_getShadowRoot", "element", "rootNode", "getRootNode", "ShadowRoot", "_getFocusedElementPierceShadowDom", "activeElement", "shadowRoot", "newActiveElement", "_getEventTarget", "event", "composedPath", "target", "_isTestEnvironment", "__karma__", "jasmine", "jest", "Mocha", "MutationObserverFactory", "create", "callback", "MutationObserver", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "ContentObserver", "constructor", "_mutationObserverFactory", "_observedElements", "Map", "ngOnDestroy", "forEach", "_", "element", "_cleanupObserver", "observe", "elementOrRef", "coerceElement", "Observable", "observer", "stream", "_observeElement", "subscription", "subscribe", "unsubscribe", "_unobserveElement", "has", "Subject", "mutations", "next", "characterData", "childList", "subtree", "set", "count", "get", "disconnect", "complete", "delete", "CdkObserveContent", "disabled", "_disabled", "value", "_unsubscribe", "_subscribe", "debounce", "_debounce", "coerceNumberProperty", "_contentObserver", "_elementRef", "_ngZone", "event", "EventEmitter", "_currentSubscription", "ngAfterContentInit", "runOutsideAngular", "pipe", "debounceTime", "ElementRef", "NgZone", "ɵdir", "selectors", "inputs", "booleanAttribute", "outputs", "exportAs", "features", "Directive", "args", "selector", "Output", "Input", "alias", "transform", "ObserversModule", "declarations", "exports", "NgModule", "providers", "LayoutModule", "NgModule", "mediaQueriesForWebkitCompatibility", "Set", "mediaQueryStyleNode", "MediaMatcher", "constructor", "_platform", "_nonce", "_matchMedia", "isBrowser", "window", "matchMedia", "bind", "noopMatchMedia", "query", "WEBKIT", "BLINK", "createEmptyStyleRule", "ɵfac", "MediaMatcher_Factory", "t", "Platform", "CSP_NONCE", "ɵprov", "factory", "providedIn", "Injectable", "Optional", "Inject", "nonce", "has", "document", "createElement", "setAttribute", "head", "appendChild", "sheet", "insertRule", "add", "e", "console", "error", "matches", "media", "addListener", "removeListener", "BreakpointObserver", "_mediaMatcher", "_zone", "_queries", "Map", "_destroySubject", "Subject", "ngOnDestroy", "next", "complete", "isMatched", "value", "queries", "splitQueries", "coerceArray", "some", "mediaQuery", "_registerQuery", "mql", "observe", "observables", "map", "observable", "stateObservable", "combineLatest", "concat", "pipe", "take", "skip", "debounceTime", "breakpointStates", "response", "breakpoints", "forEach", "get", "queryObservable", "Observable", "observer", "handler", "run", "startWith", "takeUntil", "output", "set", "NgZone", "split", "reduce", "a1", "a2", "trim", "Breakpoints", "XSmall", "Small", "Medium", "Large", "XLarge", "Handset", "Tablet", "Web", "HandsetPortrait", "TabletPortrait", "WebPortrait", "HandsetLandscape", "TabletLandscape", "WebLandscape", "ID_DELIMITER", "addAriaReferencedId", "el", "attr", "id", "ids", "getAriaReferenceIds", "some", "existingId", "trim", "push", "setAttribute", "join", "removeAriaReferencedId", "filteredIds", "filter", "val", "length", "removeAttribute", "getAttribute", "match", "CDK_DESCRIBEDBY_ID_PREFIX", "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", "nextId", "AriaDescriber", "constructor", "_document", "_platform", "_messageRegistry", "Map", "_messagesContainer", "_id", "inject", "APP_ID", "describe", "hostElement", "message", "role", "_canBeDescribed", "key", "getKey", "setMessageId", "set", "messageElement", "referenceCount", "has", "_createMessageElement", "_isElementDescribedByMessage", "_addMessageReference", "removeDescription", "_isElementNode", "_removeMessageReference", "registeredMessage", "get", "_deleteMessageElement", "childNodes", "length", "remove", "ngOnDestroy", "describedElements", "querySelectorAll", "i", "_removeCdkDescribedByReferenceIds", "removeAttribute", "clear", "createElement", "textContent", "setAttribute", "_createMessagesContainer", "appendChild", "delete", "containerClassName", "serverContainers", "messagesContainer", "style", "visibility", "classList", "add", "isBrowser", "body", "element", "originalReferenceIds", "getAriaReferenceIds", "filter", "id", "indexOf", "join", "addAriaReferencedId", "removeAriaReferencedId", "referenceIds", "messageId", "trimmedMessage", "trim", "ariaLabel", "getAttribute", "nodeType", "ELEMENT_NODE", "ɵfac", "AriaDescriber_Factory", "t", "ɵɵinject", "DOCUMENT", "Platform", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "serviceId", "InteractivityChecker", "constructor", "_platform", "isDisabled", "element", "hasAttribute", "isVisible", "hasGeometry", "getComputedStyle", "visibility", "isTabbable", "isBrowser", "frameElement", "getFrameElement", "getWindow", "getTabIndexValue", "nodeName", "toLowerCase", "tabIndexValue", "WEBKIT", "IOS", "isPotentiallyTabbableIOS", "FIREFOX", "tabIndex", "isFocusable", "config", "isPotentiallyFocusable", "ignoreVisibility", "ɵɵinject", "Platform", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "ɵfac", "providedIn", "ɵsetClassMetadata", "Injectable", "window", "offsetWidth", "offsetHeight", "getClientRects", "length", "isNativeFormElement", "isHiddenInput", "isInputElement", "type", "isAnchorWithHref", "isAnchorElement", "hasValidTabIndex", "undefined", "getAttribute", "isNaN", "parseInt", "inputType", "node", "ownerDocument", "defaultView", "FocusTrap", "enabled", "_enabled", "value", "_startAnchor", "_endAnchor", "_toggleAnchorTabIndex", "_element", "_checker", "_ngZone", "_document", "deferAnchors", "_hasAttached", "startAnchorListener", "focusLastTabbableElement", "endAnchorListener", "focusFirstTabbableElement", "attachAnchors", "destroy", "startAnchor", "endAnchor", "removeEventListener", "remove", "runOutsideAngular", "_createAnchor", "addEventListener", "parentNode", "insertBefore", "nextSibling", "focusInitialElementWhenReady", "options", "Promise", "resolve", "_executeOnStable", "focusInitialElement", "focusFirstTabbableElementWhenReady", "focusLastTabbableElementWhenReady", "_getRegionBoundary", "bound", "markers", "querySelectorAll", "ngDevMode", "i", "console", "warn", "_getFirstTabbableElement", "_getLastTabbableElement", "redirectToElement", "querySelector", "focusableChild", "focus", "hasAttached", "root", "children", "tabbableChild", "nodeType", "ELEMENT_NODE", "anchor", "createElement", "classList", "add", "setAttribute", "isEnabled", "removeAttribute", "toggleAnchors", "fn", "isStable", "onStable", "pipe", "take", "subscribe", "FocusTrapFactory", "create", "deferCaptureElements", "FocusTrapFactory_Factory", "t", "NgZone", "DOCUMENT", "Inject", "CdkTrapFocus", "focusTrap", "_elementRef", "_focusTrapFactory", "_previouslyFocusedElement", "nativeElement", "ngOnDestroy", "ngAfterContentInit", "autoCapture", "_captureFocus", "ngDoCheck", "ngOnChanges", "changes", "autoCaptureChange", "firstChange", "_getFocusedElementPierceShadowDom", "CdkTrapFocus_Factory", "ɵɵdirectiveInject", "ElementRef", "ɵɵdefineDirective", "selectors", "inputs", "booleanAttribute", "exportAs", "features", "ɵɵInputTransformsFeature", "ɵɵNgOnChangesFeature", "Directive", "args", "selector", "Input", "alias", "transform", "ConfigurableFocusTrap", "_focusTrapManager", "register", "deregister", "_inertStrategy", "defer", "_enable", "preventFocus", "_disable", "allowFocus", "FOCUS_TRAP_INERT_STRATEGY", "InjectionToken", "EventListenerFocusTrapInertStrategy", "_listener", "e", "_trapFocus", "event", "target", "focusTrapRoot", "contains", "closest", "setTimeout", "activeElement", "FocusTrapManager", "_focusTrapStack", "filter", "ft", "stack", "push", "indexOf", "splice", "ConfigurableFocusTrapFactory", "configObject", "Optional", "isFakeMousedownFromScreenReader", "buttons", "detail", "isFakeTouchstartFromScreenReader", "touch", "touches", "changedTouches", "identifier", "radiusX", "radiusY", "INPUT_MODALITY_DETECTOR_OPTIONS", "INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS", "ignoreKeys", "ALT", "CONTROL", "MAC_META", "META", "SHIFT", "TOUCH_BUFFER_MS", "modalityEventListenerOptions", "normalizePassiveListenerOptions", "passive", "capture", "InputModalityDetector", "mostRecentModality", "_modality", "ngZone", "document", "_mostRecentTarget", "BehaviorSubject", "_lastTouchMs", "_onKeydown", "_options", "some", "keyCode", "next", "_getEventTarget", "_onMousedown", "Date", "now", "_onTouchstart", "modalityDetected", "skip", "modalityChanged", "distinctUntilChanged", "complete", "LIVE_ANNOUNCER_ELEMENT_TOKEN", "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", "LIVE_ANNOUNCER_DEFAULT_OPTIONS", "uniqueIds", "LiveAnnouncer", "elementToken", "_defaultOptions", "_liveElement", "_createLiveElement", "announce", "message", "defaultOptions", "politeness", "duration", "clear", "clearTimeout", "_previousTimeout", "id", "_exposeAnnouncerToModals", "_currentPromise", "_currentResolve", "textContent", "elementClass", "previousElements", "getElementsByClassName", "liveEl", "body", "appendChild", "modals", "modal", "ariaOwns", "LiveAnnouncer_Factory", "CdkAriaLive", "_politeness", "_subscription", "unsubscribe", "_contentObserver", "observe", "elementText", "_previousAnnouncedText", "_liveAnnouncer", "ContentObserver", "FOCUS_MONITOR_DEFAULT_OPTIONS", "captureEventListenerOptions", "FocusMonitor", "_inputModalityDetector", "_origin", "_windowFocused", "_originFromTouchInteraction", "_elementInfo", "Map", "_monitoredElementCount", "_rootNodeFocusListenerCount", "_windowFocusListener", "_windowFocusTimeoutId", "_stopInputModalityDetector", "Subject", "_rootNodeFocusAndBlurListener", "parentElement", "_onFocus", "_onBlur", "_detectionMode", "detectionMode", "monitor", "checkChildren", "coerceElement", "of", "rootNode", "_getShadowRoot", "_getDocument", "cachedInfo", "get", "subject", "info", "set", "_registerGlobalListeners", "stopMonitoring", "elementInfo", "_setClasses", "delete", "_removeGlobalListeners", "focusVia", "origin", "focusedElement", "_getClosestElementsInfo", "forEach", "currentElement", "_originChanged", "_setOrigin", "_info", "_getWindow", "doc", "_getFocusOrigin", "focusEventTarget", "_shouldBeAttributedToTouch", "_lastFocusOrigin", "_isLastInteractionFromInputLabel", "toggle", "isFromInteraction", "_originTimeoutId", "ms", "relatedTarget", "Node", "_emitOrigin", "observers", "run", "rootNodeFocusListeners", "takeUntil", "modality", "has", "results", "mostRecentTarget", "disabled", "labels", "CdkMonitorFocus", "_focusMonitor", "_focusOrigin", "cdkFocusChange", "EventEmitter", "focusOrigin", "ngAfterViewInit", "_monitorSubscription", "emit", "outputs", "Output", "BLACK_ON_WHITE_CSS_CLASS", "WHITE_ON_BLACK_CSS_CLASS", "HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS", "HighContrastModeDetector", "_breakpointSubscription", "inject", "BreakpointObserver", "_hasCheckedHighContrastMode", "_applyBodyHighContrastModeCssClasses", "getHighContrastMode", "testElement", "style", "backgroundColor", "position", "documentWindow", "computedStyle", "computedColor", "replace", "bodyClasses", "mode", "HighContrastModeDetector_Factory", "A11yModule", "highContrastModeDetector", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "ObserversModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule", "DIR_DOCUMENT", "InjectionToken", "providedIn", "factory", "DIR_DOCUMENT_FACTORY", "inject", "DOCUMENT", "RTL_LOCALE_PATTERN", "_resolveDirectionality", "rawValue", "value", "toLowerCase", "navigator", "language", "test", "Directionality", "constructor", "_document", "change", "EventEmitter", "bodyDir", "body", "dir", "htmlDir", "documentElement", "ngOnDestroy", "complete", "ɵfac", "Directionality_Factory", "t", "ɵɵinject", "ɵprov", "ɵɵdefineInjectable", "token", "ɵsetClassMetadata", "Injectable", "Optional", "Inject", "Dir", "_dir", "_isInitialized", "previousValue", "_rawDir", "emit", "ngAfterContentInit", "ɵɵdefineDirective", "type", "selectors", "hostVars", "hostBindings", "Dir_HostBindings", "rf", "ctx", "i0", "ɵɵattribute", "inputs", "outputs", "exportAs", "features", "ɵɵProvidersFeature", "provide", "useExisting", "Directive", "args", "selector", "providers", "host", "Output", "Input", "BidiModule", "ɵɵdefineNgModule", "declarations", "exports", "ɵɵdefineInjector", "NgModule", "_c0", "_c1", "_c2", "MatOption_Conditional_0_Template", "rf", "ctx", "ctx_r0", "selected", "MatOption_Conditional_5_Template", "ctx_r2", "MatOption_Conditional_6_Template", "ctx_r3", "_c3", "_c4", "VERSION", "Version", "AnimationCurves", "STANDARD_CURVE", "DECELERATION_CURVE", "ACCELERATION_CURVE", "SHARP_CURVE", "AnimationDurations", "COMPLEX", "ENTERING", "EXITING", "MATERIAL_SANITY_CHECKS_FACTORY", "MATERIAL_SANITY_CHECKS", "InjectionToken", "providedIn", "factory", "MatCommonModule", "constructor", "highContrastModeDetector", "_sanityChecks", "_document", "_hasDoneGlobalChecks", "_applyBodyHighContrastModeCssClasses", "ngDevMode", "platform", "inject", "Platform", "optional", "_checkIsEnabled", "_checkDoctypeIsDefined", "_checkThemeIsPresent", "isBrowser", "_checkCdkVersionMatch", "name", "_isTestEnvironment", "HighContrastModeDetector", "DOCUMENT", "imports", "BidiModule", "exports", "NgModule", "args", "Optional", "Inject", "doc", "doctype", "console", "warn", "body", "testElement", "createElement", "classList", "add", "appendChild", "computedStyle", "getComputedStyle", "display", "remove", "full", "VERSION$1", "MAT_DATE_LOCALE", "InjectionToken", "providedIn", "factory", "MAT_DATE_LOCALE_FACTORY", "inject", "LOCALE_ID", "DateAdapter", "constructor", "_localeChanges", "Subject", "localeChanges", "getValidDateOrNull", "obj", "isDateInstance", "isValid", "deserialize", "value", "invalid", "setLocale", "locale", "next", "compareDate", "first", "second", "getYear", "getMonth", "getDate", "sameDate", "firstValid", "secondValid", "clampDate", "date", "min", "max", "MAT_DATE_FORMATS", "ISO_8601_REGEX", "range", "length", "valueFunction", "valuesArray", "Array", "i", "NativeDateAdapter", "matDateLocale", "useUtcForDisplay", "_matDateLocale", "optional", "undefined", "getFullYear", "getDayOfWeek", "getDay", "getMonthNames", "style", "dtf", "Intl", "DateTimeFormat", "month", "timeZone", "_format", "Date", "getDateNames", "day", "getDayOfWeekNames", "weekday", "getYearName", "year", "getFirstDayOfWeek", "getNumDaysInMonth", "_createDateWithOverflow", "clone", "getTime", "createDate", "ngDevMode", "Error", "result", "today", "parse", "parseFormat", "format", "displayFormat", "addCalendarYears", "years", "addCalendarMonths", "months", "newDate", "addCalendarDays", "days", "toIso8601", "getUTCFullYear", "_2digit", "getUTCMonth", "getUTCDate", "join", "test", "isNaN", "NaN", "d", "setFullYear", "setHours", "n", "slice", "setUTCFullYear", "setUTCHours", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "ɵfac", "NativeDateAdapter_Factory", "t", "Injectable", "Optional", "Inject", "MAT_NATIVE_DATE_FORMATS", "dateInput", "display", "monthYearLabel", "dateA11yLabel", "monthYearA11yLabel", "NativeDateModule", "provide", "useClass", "NgModule", "args", "providers", "MatNativeDateModule", "ɵmod", "imports", "ɵinj", "useValue", "ShowOnDirtyErrorStateMatcher", "isErrorState", "control", "form", "dirty", "submitted", "ErrorStateMatcher", "touched", "ɵprov", "MatLine", "selectors", "hostAttrs", "Directive", "selector", "host", "MatLineModule", "ɵmod", "declarations", "MatLine", "imports", "MatCommonModule", "exports", "NgModule", "args", "RippleRef", "constructor", "_renderer", "element", "config", "_animationForciblyDisabledThroughCss", "state", "fadeOut", "fadeOutRipple", "passiveCapturingEventOptions$1", "normalizePassiveListenerOptions", "passive", "capture", "RippleEventManager", "_events", "Map", "_delegateEventHandler", "event", "target", "_getEventTarget", "get", "type", "forEach", "handlers", "contains", "handler", "handleEvent", "addHandler", "ngZone", "name", "handlersForEvent", "handlersForElement", "add", "set", "Set", "runOutsideAngular", "document", "addEventListener", "removeHandler", "delete", "size", "removeEventListener", "defaultRippleAnimationConfig", "enterDuration", "exitDuration", "ignoreMouseEventsTimeout", "passiveCapturingEventOptions", "pointerDownEvents", "pointerUpEvents", "RippleRenderer", "_target", "_ngZone", "elementOrElementRef", "_platform", "_isPointerDown", "_activeRipples", "_pointerUpEventsRegistered", "isBrowser", "_containerElement", "coerceElement", "fadeInRipple", "x", "y", "containerRect", "_containerRect", "getBoundingClientRect", "animationConfig", "animation", "centered", "left", "width", "top", "height", "radius", "distanceToFurthestCorner", "offsetX", "offsetY", "ripple", "createElement", "classList", "style", "color", "backgroundColor", "transitionDuration", "appendChild", "computedStyles", "window", "getComputedStyle", "userTransitionProperty", "transitionProperty", "userTransitionDuration", "animationForciblyDisabledThroughCss", "rippleRef", "transform", "persistent", "_mostRecentTransientRipple", "eventListeners", "onTransitionEnd", "_finishRippleTransition", "onTransitionCancel", "_destroyRipple", "rippleEl", "opacity", "fadeOutAll", "_getActiveRipples", "fadeOutAllNonPersistent", "setupTriggerEvents", "_triggerElement", "_removeTriggerEvents", "_eventManager", "_onMousedown", "_onTouchStart", "_onPointerUp", "_startFadeOutTransition", "isMostRecentTransientRipple", "remove", "isFakeMousedown", "isFakeMousedownFromScreenReader", "isSyntheticEvent", "_lastTouchStartEvent", "Date", "now", "rippleDisabled", "clientX", "clientY", "rippleConfig", "isFakeTouchstartFromScreenReader", "touches", "changedTouches", "i", "length", "isVisible", "terminateOnPointerUp", "Array", "from", "keys", "trigger", "rect", "distX", "Math", "max", "abs", "right", "distY", "bottom", "sqrt", "MAT_RIPPLE_GLOBAL_OPTIONS", "InjectionToken", "MatRipple", "disabled", "_disabled", "value", "_setupTriggerEventsIfEnabled", "_trigger", "_elementRef", "nativeElement", "platform", "globalOptions", "_animationMode", "_isInitialized", "_globalOptions", "_rippleRenderer", "ngOnInit", "ngOnDestroy", "launch", "configOrX", "ElementRef", "NgZone", "Platform", "ANIMATION_MODULE_TYPE", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatRipple_HostBindings", "rf", "ctx", "Directive", "selector", "exportAs", "host", "Optional", "Inject", "Input", "unbounded", "MatRippleModule", "MatPseudoCheckbox", "appearance", "ɵfac", "MatPseudoCheckbox_Factory", "t", "ɵcmp", "MatPseudoCheckbox_HostBindings", "Component", "ViewEncapsulation", "None", "changeDetection", "ChangeDetectionStrategy", "OnPush", "template", "styles", "MatPseudoCheckboxModule", "ɵinj", "MAT_OPTION_PARENT_COMPONENT", "_uniqueOptgroupIdCounter", "MAT_OPTGROUP", "MatOptgroup", "parent", "_labelId", "_inert", "inertGroups", "MatOptgroup_Factory", "MatOptgroup_HostBindings", "booleanAttribute", "features", "provide", "useExisting", "encapsulation", "providers", "label", "_uniqueIdCounter", "MatOptionSelectionChange", "source", "isUserInput", "MatOption", "multiple", "_parent", "selected", "_selected", "group", "disableRipple", "hideSingleSelectionIndicator", "_element", "_changeDetectorRef", "_active", "_mostRecentViewValue", "id", "onSelectionChange", "EventEmitter", "_stateChanges", "Subject", "active", "viewValue", "_text", "textContent", "trim", "select", "emitEvent", "markForCheck", "_emitSelectionChangeEvent", "deselect", "focus", "_origin", "options", "_getHostElement", "setActiveStyles", "setInactiveStyles", "getLabel", "_handleKeydown", "keyCode", "ENTER", "SPACE", "hasModifierKey", "_selectViaInteraction", "preventDefault", "_getTabIndex", "ngAfterViewChecked", "next", "complete", "emit", "ChangeDetectorRef", "viewQuery", "MatOption_Query", "MatOption_HostBindings", "MatOption_keydown_HostBindingHandler", "$event", "outputs", "MatOption_Conditional_6_Template", "dependencies", "Output", "ViewChild", "static", "MatOptionModule", "ɵmod", "declarations", "MatOption", "MatOptgroup", "imports", "MatRippleModule", "MatCommonModule", "MatPseudoCheckboxModule", "exports", "ɵinj", "NgModule", "args", "eventListenerOptions", "capture", "rippleInteractionEvents", "matRippleUninitialized", "matRippleClassName", "matRippleCentered", "matRippleDisabled", "MatRippleLoader", "constructor", "_document", "inject", "DOCUMENT", "optional", "_animationMode", "ANIMATION_MODULE_TYPE$1", "_globalRippleOptions", "MAT_RIPPLE_GLOBAL_OPTIONS", "_platform", "Platform", "_ngZone", "NgZone", "_onInteraction", "event", "target", "HTMLElement", "eventTarget", "element", "closest", "createRipple", "runOutsideAngular", "addEventListener", "ngOnDestroy", "removeEventListener", "configureRipple", "host", "config", "setAttribute", "className", "hasAttribute", "centered", "disabled", "getRipple", "matRipple", "setDisabled", "ripple", "removeAttribute", "querySelector", "remove", "rippleEl", "createElement", "classList", "add", "getAttribute", "append", "MatRipple", "ElementRef", "undefined", "_isInitialized", "trigger", "attachRipple", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "_c0", "_c1", "_c2", "_c3", "_c4", "_c5", "_c6", "_c7", "_c8", "_c9", "_c10", "MAT_BUTTON_HOST", "HOST_SELECTOR_MDC_CLASS_PAIR", "attribute", "mdcClasses", "MatButtonBase", "ripple", "_rippleLoader", "getRipple", "_elementRef", "nativeElement", "v", "attachRipple", "disableRipple", "_disableRipple", "value", "_updateRippleDisabled", "disabled", "_disabled", "constructor", "_platform", "_ngZone", "_animationMode", "_focusMonitor", "inject", "FocusMonitor", "MatRippleLoader", "_isFab", "configureRipple", "className", "element", "classList", "hasAttribute", "add", "ngAfterViewInit", "monitor", "ngOnDestroy", "stopMonitoring", "focus", "_origin", "options", "focusVia", "setDisabled", "inputs", "color", "booleanAttribute", "features", "Directive", "Input", "transform", "MAT_ANCHOR_HOST", "MatAnchorBase", "elementRef", "platform", "ngZone", "animationMode", "_haltDisabledEvents", "event", "preventDefault", "stopImmediatePropagation", "ngOnInit", "runOutsideAngular", "addEventListener", "removeEventListener", "ɵdir", "tabIndex", "undefined", "numberAttribute", "args", "MatButton", "ɵfac", "MatButton_Factory", "t", "ElementRef", "Platform", "NgZone", "ANIMATION_MODULE_TYPE", "ɵcmp", "selectors", "hostVars", "hostBindings", "MatButton_HostBindings", "rf", "ctx", "styles", "encapsulation", "changeDetection", "Component", "selector", "host", "exportAs", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "template", "Optional", "Inject", "MatAnchor", "MatAnchor_Factory", "MatAnchor_HostBindings", "MAT_FAB_DEFAULT_OPTIONS", "InjectionToken", "providedIn", "factory", "MAT_FAB_DEFAULT_OPTIONS_FACTORY", "defaults", "MatFabButton", "_options", "MatFabButton_HostBindings", "extended", "MatMiniFabButton", "MatMiniFabButton_HostBindings", "MatFabAnchor", "MatFabAnchor_HostBindings", "MatMiniFabAnchor", "MatMiniFabAnchor_HostBindings", "MatIconButton", "centered", "MatIconButton_Factory", "MatIconButton_HostBindings", "MatIconAnchor", "MatIconAnchor_Factory", "MatIconAnchor_HostBindings", "MatButtonModule", "ɵmod", "declarations", "imports", "MatCommonModule", "MatRippleModule", "exports", "ɵinj", "NgModule", "throwNullPortalError", "Error", "throwPortalAlreadyAttachedError", "throwPortalOutletAlreadyDisposedError", "throwUnknownPortalTypeError", "throwNullPortalOutletError", "throwNoPortalAttachedError", "Portal", "attach", "host", "ngDevMode", "hasAttached", "_attachedHost", "detach", "isAttached", "setAttachedHost", "ComponentPortal", "constructor", "component", "viewContainerRef", "injector", "componentFactoryResolver", "projectableNodes", "TemplatePortal", "templateRef", "context", "origin", "elementRef", "undefined", "DomPortal", "element", "ElementRef", "nativeElement", "BasePortalOutlet", "_isDisposed", "attachDomPortal", "_attachedPortal", "portal", "attachComponentPortal", "attachTemplatePortal", "_invokeDisposeFn", "dispose", "setDisposeFn", "fn", "_disposeFn", "DomPortalOutlet", "BasePortalOutlet", "constructor", "outletElement", "_componentFactoryResolver", "_appRef", "_defaultInjector", "_document", "attachDomPortal", "portal", "ngDevMode", "Error", "element", "parentNode", "anchorNode", "createComment", "insertBefore", "appendChild", "_attachedPortal", "setDisposeFn", "replaceChild", "attachComponentPortal", "resolver", "componentFactoryResolver", "componentFactory", "resolveComponentFactory", "component", "componentRef", "viewContainerRef", "createComponent", "length", "injector", "projectableNodes", "undefined", "destroy", "create", "Injector", "NULL", "attachView", "hostView", "viewCount", "detachView", "_getComponentRootNode", "attachTemplatePortal", "viewContainer", "viewRef", "createEmbeddedView", "templateRef", "context", "rootNodes", "forEach", "rootNode", "detectChanges", "index", "indexOf", "remove", "dispose", "CdkPortal", "TemplatePortal", "constructor", "templateRef", "viewContainerRef", "TemplateRef", "ViewContainerRef", "selectors", "exportAs", "features", "Directive", "args", "selector", "TemplatePortalDirective", "t", "ɵdir", "provide", "useExisting", "providers", "CdkPortalOutlet", "BasePortalOutlet", "_componentFactoryResolver", "_viewContainerRef", "_document", "_isInitialized", "attached", "EventEmitter", "attachDomPortal", "portal", "ngDevMode", "Error", "element", "parentNode", "anchorNode", "createComment", "setAttachedHost", "insertBefore", "_getRootNode", "appendChild", "_attachedPortal", "setDisposeFn", "replaceChild", "hasAttached", "detach", "attach", "attachedRef", "_attachedRef", "ngOnInit", "ngOnDestroy", "dispose", "attachComponentPortal", "resolver", "componentFactoryResolver", "componentFactory", "resolveComponentFactory", "component", "ref", "createComponent", "length", "injector", "projectableNodes", "undefined", "hostView", "rootNodes", "destroy", "emit", "attachTemplatePortal", "viewRef", "createEmbeddedView", "context", "clear", "nativeElement", "nodeType", "ELEMENT_NODE", "ɵfac", "CdkPortalOutlet_Factory", "ComponentFactoryResolver", "DOCUMENT", "inputs", "outputs", "Inject", "Output", "PortalHostDirective", "PortalModule", "ɵmod", "declarations", "exports", "NgModule", "DataSource", "isDataSource", "value", "connect", "ConnectableObservable", "ArrayDataSource", "constructor", "_data", "isObservable", "of", "disconnect", "_RecycleViewRepeaterStrategy", "constructor", "viewCacheSize", "_viewCache", "applyChanges", "changes", "viewContainerRef", "itemContextFactory", "itemValueResolver", "itemViewChanged", "forEachOperation", "record", "adjustedPreviousIndex", "currentIndex", "view", "operation", "previousIndex", "viewArgsFactory", "_insertView", "_detachAndCacheView", "_moveView", "context", "detach", "destroy", "value", "cachedView", "_insertViewFromCache", "$implicit", "undefined", "viewArgs", "createEmbeddedView", "templateRef", "index", "detachedView", "_maybeCacheView", "get", "move", "length", "push", "indexOf", "remove", "pop", "insert", "UniqueSelectionDispatcher", "constructor", "_listeners", "notify", "id", "name", "listener", "listen", "push", "filter", "registered", "ngOnDestroy", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "_VIEW_REPEATER_STRATEGY", "InjectionToken", "_c0", "_c1", "VIRTUAL_SCROLL_STRATEGY", "InjectionToken", "FixedSizeVirtualScrollStrategy", "constructor", "itemSize", "minBufferPx", "maxBufferPx", "_scrolledIndexChange", "Subject", "scrolledIndexChange", "pipe", "distinctUntilChanged", "_viewport", "_itemSize", "_minBufferPx", "_maxBufferPx", "attach", "viewport", "_updateTotalContentSize", "_updateRenderedRange", "detach", "complete", "updateItemAndBufferSize", "ngDevMode", "Error", "onContentScrolled", "onDataLengthChanged", "onContentRendered", "onRenderedOffsetChanged", "scrollToIndex", "index", "behavior", "scrollToOffset", "setTotalContentSize", "getDataLength", "renderedRange", "getRenderedRange", "newRange", "start", "end", "viewportSize", "getViewportSize", "dataLength", "scrollOffset", "measureScrollOffset", "firstVisibleIndex", "maxVisibleItems", "Math", "ceil", "newVisibleIndex", "max", "min", "floor", "startBuffer", "expandStart", "endBuffer", "expandEnd", "setRenderedRange", "setRenderedContentOffset", "next", "_fixedSizeVirtualScrollStrategyFactory", "fixedSizeDir", "_scrollStrategy", "CdkFixedSizeVirtualScroll", "value", "coerceNumberProperty", "ngOnChanges", "ɵdir", "selectors", "inputs", "standalone", "features", "provide", "useFactory", "deps", "forwardRef", "Directive", "args", "selector", "providers", "Input", "DEFAULT_SCROLL_TIME", "ScrollDispatcher", "_ngZone", "_platform", "document", "_scrolled", "_globalSubscription", "_scrolledCount", "scrollContainers", "Map", "_document", "register", "scrollable", "has", "set", "elementScrolled", "subscribe", "deregister", "scrollableReference", "get", "unsubscribe", "delete", "scrolled", "auditTimeInMs", "isBrowser", "of", "Observable", "observer", "_addGlobalListener", "subscription", "auditTime", "_removeGlobalListener", "ngOnDestroy", "forEach", "_", "container", "ancestorScrolled", "elementOrElementRef", "ancestors", "getAncestorScrollContainers", "filter", "target", "indexOf", "scrollingContainers", "_subscription", "_scrollableContainsElement", "push", "_getWindow", "defaultView", "window", "element", "coerceElement", "scrollableElement", "getElementRef", "nativeElement", "parentElement", "runOutsideAngular", "fromEvent", "ɵfac", "ScrollDispatcher_Factory", "t", "NgZone", "Platform", "DOCUMENT", "ɵprov", "factory", "providedIn", "Injectable", "Optional", "Inject", "CdkScrollable", "elementRef", "scrollDispatcher", "ngZone", "dir", "_destroyed", "_elementScrolled", "takeUntil", "ngOnInit", "scrollTo", "options", "el", "isRtl", "left", "right", "bottom", "top", "scrollHeight", "clientHeight", "getRtlScrollAxisType", "scrollWidth", "clientWidth", "_applyScrollToOptions", "supportsScrollBehavior", "scrollTop", "scrollLeft", "from", "LEFT", "RIGHT", "ElementRef", "Directionality", "DEFAULT_RESIZE_TIME", "ViewportRuler", "_change", "_changeListener", "event", "addEventListener", "change", "_viewportSize", "removeEventListener", "_updateViewportSize", "output", "width", "height", "getViewportRect", "scrollPosition", "getViewportScrollPosition", "documentElement", "documentRect", "getBoundingClientRect", "body", "scrollY", "scrollX", "throttleTime", "innerWidth", "innerHeight", "ViewportRuler_Factory", "VIRTUAL_SCROLLABLE", "CdkVirtualScrollable", "measureViewportSize", "orientation", "viewportEl", "rangesEqual", "r1", "r2", "SCROLL_SCHEDULER", "requestAnimationFrame", "animationFrameScheduler", "asapScheduler", "CdkVirtualScrollViewport", "_orientation", "_calculateSpacerSize", "_changeDetectorRef", "viewportRuler", "inject", "_detachedSubject", "_renderedRangeSubject", "appendOnly", "Promise", "resolve", "then", "run", "renderedRangeStream", "_totalContentSize", "_totalContentWidth", "_totalContentHeight", "_renderedRange", "_dataLength", "_renderedContentOffset", "_renderedContentOffsetNeedsRewrite", "_isChangeDetectionPending", "_runAfterChangeDetection", "_viewportChanges", "Subscription", "EMPTY", "checkViewportSize", "classList", "add", "_measureViewportSize", "startWith", "_markChangeDetectionNeeded", "forOf", "_forOf", "dataStream", "data", "newLength", "length", "_doChangeDetection", "measureBoundingClientRectWithScrollOffset", "size", "range", "getOffsetToRenderedContentStart", "offset", "to", "isHorizontal", "axis", "axisDirection", "transform", "Number", "_renderedContentTransform", "measureRenderedContentSize", "_from", "measureViewportOffset", "fromRect", "scrollerClientRect", "viewportClientRect", "contentEl", "_contentWrapper", "offsetWidth", "offsetHeight", "measureRangeSize", "runAfter", "style", "markForCheck", "runAfterChangeDetection", "fn", "ChangeDetectorRef", "viewQuery", "CdkVirtualScrollViewport_Query", "rf", "ctx", "booleanAttribute", "outputs", "virtualScrollable", "styles", "encapsulation", "changeDetection", "Component", "host", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "template", "Output", "ViewChild", "static", "getOffset", "direction", "node", "rect", "CdkVirtualForOf", "cdkVirtualForOf", "_cdkVirtualForOf", "isDataSource", "_dataSourceChanges", "ArrayDataSource", "isObservable", "Array", "cdkVirtualForTrackBy", "_cdkVirtualForTrackBy", "_needsUpdate", "item", "undefined", "cdkVirtualForTemplate", "_template", "cdkVirtualForTemplateCacheSize", "_viewRepeater", "viewCacheSize", "_viewContainerRef", "_differs", "viewChange", "pairwise", "switchMap", "prev", "cur", "_changeDataSource", "shareReplay", "_differ", "_data", "_onRenderedDataChange", "observers", "renderedStartIndex", "rangeLen", "firstNode", "lastNode", "i", "view", "rootNodes", "ngDoCheck", "changes", "diff", "_renderedItems", "_updateContext", "_applyChanges", "slice", "find", "create", "oldDs", "newDs", "disconnect", "connect", "count", "context", "_updateComputedContextProperties", "detectChanges", "applyChanges", "record", "_adjustedPreviousIndex", "currentIndex", "_getEmbeddedViewArgs", "forEachIdentityChange", "$implicit", "first", "last", "even", "odd", "templateRef", "CdkVirtualForOf_Factory", "ViewContainerRef", "TemplateRef", "IterableDiffers", "_VIEW_REPEATER_STRATEGY", "useClass", "_RecycleViewRepeaterStrategy", "SkipSelf", "CdkVirtualScrollableElement", "hostAttrs", "useExisting", "CdkVirtualScrollableWindow", "CdkScrollableModule", "imports", "exports", "NgModule", "ScrollingModule", "ɵmod", "BidiModule", "ɵinj", "scrollBehaviorSupported", "supportsScrollBehavior", "BlockScrollStrategy", "constructor", "_viewportRuler", "document", "_previousHTMLStyles", "top", "left", "_isEnabled", "_document", "attach", "enable", "_canBeEnabled", "root", "documentElement", "_previousScrollPosition", "getViewportScrollPosition", "style", "coerceCssPixelValue", "classList", "add", "disable", "html", "body", "htmlStyle", "bodyStyle", "previousHtmlScrollBehavior", "scrollBehavior", "previousBodyScrollBehavior", "remove", "window", "scroll", "contains", "viewport", "getViewportSize", "scrollHeight", "height", "scrollWidth", "width", "getMatScrollStrategyAlreadyAttachedError", "Error", "CloseScrollStrategy", "_scrollDispatcher", "_ngZone", "_config", "_scrollSubscription", "_detach", "_overlayRef", "hasAttached", "run", "detach", "overlayRef", "ngDevMode", "stream", "scrolled", "pipe", "filter", "scrollable", "overlayElement", "getElementRef", "nativeElement", "threshold", "_initialScrollPosition", "subscribe", "scrollPosition", "Math", "abs", "updatePosition", "unsubscribe", "NoopScrollStrategy", "isElementScrolledOutsideView", "element", "scrollContainers", "some", "containerBounds", "outsideAbove", "bottom", "outsideBelow", "outsideLeft", "right", "outsideRight", "isElementClippedByScrolling", "scrollContainerRect", "clippedAbove", "clippedBelow", "clippedLeft", "clippedRight", "RepositionScrollStrategy", "throttle", "scrollThrottle", "autoClose", "overlayRect", "getBoundingClientRect", "parentRects", "ScrollStrategyOptions", "noop", "close", "config", "block", "reposition", "ɵfac", "ScrollStrategyOptions_Factory", "t", "ɵɵinject", "ScrollDispatcher", "ViewportRuler", "NgZone", "DOCUMENT", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "OverlayConfig", "scrollStrategy", "panelClass", "hasBackdrop", "backdropClass", "disposeOnNavigation", "configKeys", "Object", "keys", "key", "undefined", "ConnectedOverlayPositionChange", "constructor", "connectionPair", "scrollableViewProperties", "validateVerticalPosition", "property", "value", "Error", "validateHorizontalPosition", "BaseOverlayDispatcher", "document", "_attachedOverlays", "_document", "ngOnDestroy", "detach", "add", "overlayRef", "remove", "push", "index", "indexOf", "splice", "length", "ɵfac", "BaseOverlayDispatcher_Factory", "t", "ɵɵinject", "DOCUMENT", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "OverlayKeyboardDispatcher", "_ngZone", "_keydownListener", "event", "overlays", "i", "_keydownEvents", "observers", "keydownEvents", "run", "next", "_isAttached", "runOutsideAngular", "body", "addEventListener", "removeEventListener", "OverlayKeyboardDispatcher_Factory", "NgZone", "Optional", "OverlayOutsideClickDispatcher", "_platform", "_cursorStyleIsSet", "_pointerDownListener", "_pointerDownEventTarget", "_getEventTarget", "_clickListener", "target", "origin", "type", "slice", "_outsidePointerEvents", "hasAttached", "overlayElement", "contains", "outsidePointerEvents", "_addEventListeners", "IOS", "_cursorOriginalValue", "style", "cursor", "OverlayOutsideClickDispatcher_Factory", "Platform", "OverlayContainer", "_containerElement", "getContainerElement", "_createContainer", "containerClass", "isBrowser", "_isTestEnvironment", "oppositePlatformContainers", "querySelectorAll", "container", "createElement", "classList", "setAttribute", "appendChild", "OverlayContainer_Factory", "OverlayRef", "_portalOutlet", "_host", "_pane", "_config", "_keyboardDispatcher", "_location", "_outsideClickDispatcher", "_animationsDisabled", "_backdropElement", "_backdropClick", "Subject", "_attachments", "_detachments", "_locationChanges", "Subscription", "EMPTY", "_backdropClickHandler", "_backdropTransitionendHandler", "_disposeBackdrop", "scrollStrategy", "_scrollStrategy", "attach", "_positionStrategy", "positionStrategy", "backdropElement", "hostElement", "portal", "parentElement", "_previousHostParent", "attachResult", "_updateStackingOrder", "_updateElementSize", "_updateElementDirection", "enable", "onStable", "pipe", "take", "subscribe", "updatePosition", "_togglePointerEvents", "hasBackdrop", "_attachBackdrop", "panelClass", "_toggleClasses", "disposeOnNavigation", "dispose", "onDestroy", "Promise", "resolve", "then", "detachBackdrop", "disable", "detachmentResult", "_detachContentWhenStable", "unsubscribe", "isAttached", "_disposeScrollStrategy", "complete", "backdropClick", "attachments", "detachments", "getConfig", "apply", "updatePositionStrategy", "strategy", "updateSize", "sizeConfig", "setDirection", "dir", "direction", "addPanelClass", "classes", "removePanelClass", "getDirection", "updateScrollStrategy", "width", "coerceCssPixelValue", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "enablePointer", "pointerEvents", "showingClass", "backdropClass", "insertBefore", "requestAnimationFrame", "nextSibling", "parentNode", "backdropToDetach", "_backdropTimeout", "setTimeout", "element", "cssClasses", "isAdd", "coerceArray", "filter", "c", "subscription", "takeUntil", "merge", "children", "backdrop", "clearTimeout", "undefined", "boundingBoxClass", "cssUnitPattern", "FlexibleConnectedPositionStrategy", "positions", "_preferredPositions", "connectedTo", "_viewportRuler", "_overlayContainer", "_lastBoundingBoxSize", "_isPushed", "_canPush", "_growAfterOpen", "_hasFlexibleDimensions", "_positionLocked", "_viewportMargin", "_scrollables", "_positionChanges", "_resizeSubscription", "_offsetX", "_offsetY", "_appliedPanelClasses", "positionChanges", "setOrigin", "_overlayRef", "ngDevMode", "_validatePositions", "_boundingBox", "_isDisposed", "_isInitialRender", "_lastPosition", "change", "reapplyLastPosition", "_clearPanelClasses", "_resetOverlayElementStyles", "_resetBoundingBoxStyles", "_viewportRect", "_getNarrowedViewportRect", "_originRect", "_getOriginRect", "_overlayRect", "getBoundingClientRect", "_containerRect", "originRect", "overlayRect", "viewportRect", "containerRect", "flexibleFits", "fallback", "pos", "originPoint", "_getOriginPoint", "overlayPoint", "_getOverlayPoint", "overlayFit", "_getOverlayFit", "isCompletelyWithinViewport", "_applyPosition", "_canFitWithFlexibleDimensions", "position", "boundingBoxRect", "_calculateBoundingBoxRect", "visibleArea", "bestFit", "bestScore", "fit", "score", "weight", "_previousPushAmount", "extendStyles", "top", "left", "right", "bottom", "alignItems", "justifyContent", "lastPosition", "withScrollableContainers", "scrollables", "withPositions", "withViewportMargin", "margin", "withFlexibleDimensions", "flexibleDimensions", "withGrowAfterOpen", "growAfterOpen", "withPush", "canPush", "withLockedPosition", "isLocked", "_origin", "withDefaultOffsetX", "offset", "withDefaultOffsetY", "withTransformOriginOn", "selector", "_transformOriginSelector", "x", "originX", "startX", "_isRtl", "endX", "y", "originY", "overlayStartX", "overlayX", "overlayStartY", "overlayY", "point", "rawOverlayRect", "viewport", "overlay", "getRoundedBoundingClientRect", "offsetX", "_getOffset", "offsetY", "leftOverflow", "rightOverflow", "topOverflow", "bottomOverflow", "visibleWidth", "_subtractOverflows", "visibleHeight", "fitsInViewportVertically", "fitsInViewportHorizontally", "availableHeight", "availableWidth", "getPixelValue", "verticalFit", "horizontalFit", "_pushOverlayOnScreen", "start", "scrollPosition", "overflowRight", "Math", "max", "overflowBottom", "overflowTop", "overflowLeft", "pushX", "pushY", "_setTransformOrigin", "_setOverlayElementStyles", "_setBoundingBoxStyles", "_addPanelClasses", "_getScrollVisibility", "changeEvent", "elements", "xOrigin", "yOrigin", "transformOrigin", "isRtl", "smallestDistanceToViewportEdge", "min", "previousHeight", "isBoundedByRightViewportEdge", "isBoundedByLeftViewportEdge", "previousWidth", "styles", "_hasExactPosition", "transform", "hasExactPosition", "hasFlexibleDimensions", "config", "getViewportScrollPosition", "_getExactOverlayY", "_getExactOverlayX", "transformString", "trim", "documentHeight", "documentElement", "clientHeight", "horizontalStyleProperty", "documentWidth", "clientWidth", "originBounds", "overlayBounds", "scrollContainerBounds", "map", "scrollable", "getElementRef", "nativeElement", "isOriginClipped", "isElementClippedByScrolling", "isOriginOutsideView", "isElementScrolledOutsideView", "isOverlayClipped", "isOverlayOutsideView", "overflows", "reduce", "currentValue", "currentOverflow", "axis", "forEach", "pair", "cssClass", "ElementRef", "Element", "destination", "source", "key", "hasOwnProperty", "input", "units", "split", "parseFloat", "clientRect", "floor", "wrapperClass", "GlobalPositionStrategy", "constructor", "_cssPosition", "_topOffset", "_bottomOffset", "_alignItems", "_xPosition", "_xOffset", "_width", "_height", "_isDisposed", "attach", "overlayRef", "config", "getConfig", "_overlayRef", "width", "updateSize", "height", "hostElement", "classList", "add", "top", "value", "left", "bottom", "right", "start", "end", "centerHorizontally", "offset", "centerVertically", "apply", "hasAttached", "styles", "overlayElement", "style", "parentStyles", "maxWidth", "maxHeight", "shouldBeFlushHorizontally", "shouldBeFlushVertically", "xPosition", "xOffset", "isRtl", "direction", "marginLeft", "marginRight", "justifyContent", "position", "marginTop", "marginBottom", "alignItems", "dispose", "parent", "remove", "OverlayPositionBuilder", "_viewportRuler", "_document", "_platform", "_overlayContainer", "global", "flexibleConnectedTo", "origin", "FlexibleConnectedPositionStrategy", "ɵfac", "OverlayPositionBuilder_Factory", "t", "ɵɵinject", "ViewportRuler", "DOCUMENT", "Platform", "OverlayContainer", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "nextUniqueId", "Overlay", "scrollStrategies", "_componentFactoryResolver", "_positionBuilder", "_keyboardDispatcher", "_injector", "_ngZone", "_directionality", "_location", "_outsideClickDispatcher", "_animationsModuleType", "create", "host", "_createHostElement", "pane", "_createPaneElement", "portalOutlet", "_createPortalOutlet", "overlayConfig", "OverlayConfig", "OverlayRef", "createElement", "id", "appendChild", "getContainerElement", "_appRef", "get", "ApplicationRef", "DomPortalOutlet", "ScrollStrategyOptions", "ComponentFactoryResolver", "OverlayKeyboardDispatcher", "Injector", "NgZone", "Directionality", "Location", "OverlayOutsideClickDispatcher", "ANIMATION_MODULE_TYPE", "Optional", "defaultPositionList", "originX", "originY", "overlayX", "overlayY", "CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY", "InjectionToken", "CdkOverlayOrigin", "elementRef", "ɵɵdirectiveInject", "ElementRef", "ɵɵdefineDirective", "type", "selectors", "exportAs", "standalone", "Directive", "args", "selector", "CdkConnectedOverlay", "offsetX", "_offsetX", "_position", "_updatePositionStrategy", "offsetY", "_offsetY", "disposeOnNavigation", "_disposeOnNavigation", "_overlay", "templateRef", "viewContainerRef", "scrollStrategyFactory", "_dir", "_backdropSubscription", "Subscription", "EMPTY", "_attachSubscription", "_detachSubscription", "_positionSubscription", "viewportMargin", "open", "disableClose", "hasBackdrop", "lockPosition", "flexibleDimensions", "growAfterOpen", "push", "backdropClick", "EventEmitter", "positionChange", "detach", "overlayKeydown", "overlayOutsideClick", "_templatePortal", "TemplatePortal", "_scrollStrategyFactory", "scrollStrategy", "dir", "ngOnDestroy", "unsubscribe", "ngOnChanges", "changes", "minWidth", "minHeight", "_attachOverlay", "_detachOverlay", "_createOverlay", "positions", "length", "_buildConfig", "attachments", "subscribe", "emit", "detachments", "keydownEvents", "event", "next", "keyCode", "ESCAPE", "hasModifierKey", "preventDefault", "outsidePointerEvents", "positionStrategy", "_createPositionStrategy", "backdropClass", "panelClass", "map", "currentPosition", "undefined", "setOrigin", "_getFlexibleConnectedPositionStrategyOrigin", "withPositions", "withFlexibleDimensions", "withPush", "withGrowAfterOpen", "withViewportMargin", "withLockedPosition", "withTransformOriginOn", "transformOriginSelector", "strategy", "observers", "positionChanges", "pipe", "takeWhile", "CdkConnectedOverlay_Factory", "TemplateRef", "ViewContainerRef", "inputs", "booleanAttribute", "outputs", "features", "ɵɵInputTransformsFeature", "ɵɵNgOnChangesFeature", "Input", "alias", "transform", "Output", "CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY", "overlay", "reposition", "CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER", "provide", "deps", "useFactory", "OverlayModule", "ɵmod", "ɵɵdefineNgModule", "imports", "BidiModule", "PortalModule", "ScrollingModule", "exports", "ɵinj", "ɵɵdefineInjector", "providers", "NgModule", "FullscreenOverlayContainer", "platform", "_fullScreenEventName", "_fullScreenListener", "removeEventListener", "_createContainer", "_adjustParentForFullscreenChange", "_addFullscreenChangeListener", "_containerElement", "fullscreenElement", "getFullscreenElement", "body", "fn", "eventName", "_getEventName", "addEventListener", "fullscreenEnabled", "webkitFullscreenEnabled", "mozFullScreenEnabled", "msFullscreenEnabled", "webkitFullscreenElement", "mozFullScreenElement", "msFullscreenElement", "FullscreenOverlayContainer_Factory", "SimpleSnackBar_Conditional_2_Template", "rf", "ctx", "_r2", "ctx_r1", "action", "ctx_r0", "_c0", "MatSnackBarContainer_ng_template_4_Template", "MAX_TIMEOUT", "Math", "pow", "MatSnackBarRef", "constructor", "containerInstance", "_overlayRef", "_afterDismissed", "Subject", "_afterOpened", "_onAction", "_dismissedByAction", "_onExit", "subscribe", "_finishDismiss", "dismiss", "closed", "exit", "clearTimeout", "_durationTimeoutId", "dismissWithAction", "next", "complete", "closeWithAction", "_dismissAfter", "duration", "setTimeout", "min", "_open", "dispose", "dismissedByAction", "afterDismissed", "afterOpened", "_onEnter", "onAction", "MAT_SNACK_BAR_DATA", "InjectionToken", "MatSnackBarConfig", "politeness", "announcementMessage", "data", "horizontalPosition", "verticalPosition", "MatSnackBarLabel", "selectors", "hostAttrs", "standalone", "Directive", "args", "selector", "host", "MatSnackBarActions", "MatSnackBarAction", "SimpleSnackBar", "snackBarRef", "hasAction", "ɵfac", "SimpleSnackBar_Factory", "t", "exportAs", "features", "dependencies", "MatButtonModule", "MatButton", "CommonModule", "styles", "encapsulation", "changeDetection", "Component", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "imports", "template", "Inject", "matSnackBarAnimations", "snackBarState", "trigger", "state", "style", "transform", "opacity", "transition", "animate", "uniqueId", "MatSnackBarContainer", "BasePortalOutlet", "_ngZone", "_elementRef", "_changeDetectorRef", "_platform", "snackBarConfig", "_document", "inject", "DOCUMENT", "_trackedModals", "Set", "_announceDelay", "_destroyed", "_onAnnounce", "_animationState", "_liveElementId", "attachDomPortal", "portal", "_assertNotAttached", "result", "_portalOutlet", "_afterPortalAttached", "_live", "FIREFOX", "_role", "attachComponentPortal", "attachTemplatePortal", "onAnimationEnd", "event", "fromState", "toState", "_completeExit", "onEnter", "run", "enter", "detectChanges", "_screenReaderAnnounce", "nativeElement", "setAttribute", "_announceTimeoutId", "ngOnDestroy", "_clearFromModals", "onMicrotaskEmpty", "pipe", "take", "element", "panelClasses", "panelClass", "Array", "isArray", "forEach", "cssClass", "classList", "add", "_exposeToModals", "label", "_label", "labelClass", "toggle", "querySelector", "id", "modals", "querySelectorAll", "i", "length", "modal", "ariaOwns", "getAttribute", "indexOf", "newValue", "replace", "trim", "removeAttribute", "clear", "hasAttached", "ngDevMode", "Error", "runOutsideAngular", "inertElement", "liveElement", "focusedElement", "isBrowser", "document", "activeElement", "HTMLElement", "contains", "appendChild", "focus", "NgZone", "ElementRef", "ChangeDetectorRef", "Platform", "viewQuery", "MatSnackBarContainer_Query", "CdkPortalOutlet", "$event", "PortalModule", "animation", "Default", "animations", "ViewChild", "static", "MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY", "MAT_SNACK_BAR_DEFAULT_OPTIONS", "providedIn", "factory", "MatSnackBar", "_openedSnackBarRef", "parent", "_parentSnackBar", "_snackBarRefAtThisLevel", "value", "_overlay", "_injector", "_breakpointObserver", "_defaultConfig", "simpleSnackBarComponent", "snackBarContainerComponent", "handsetCssClass", "openFromComponent", "component", "config", "_attach", "openFromTemplate", "open", "message", "_config", "undefined", "_attachSnackBarContainer", "overlayRef", "userInjector", "viewContainerRef", "injector", "Injector", "create", "providers", "provide", "useValue", "containerPortal", "ComponentPortal", "containerRef", "attach", "instance", "content", "userConfig", "_createOverlay", "container", "TemplateRef", "TemplatePortal", "$implicit", "_createInjector", "contentRef", "observe", "Breakpoints", "HandsetPortrait", "takeUntil", "detachments", "overlayElement", "matches", "announce", "_animateSnackBar", "overlayConfig", "OverlayConfig", "direction", "positionStrategy", "position", "global", "isRtl", "isLeft", "isRight", "left", "right", "centerHorizontally", "top", "bottom", "MatSnackBar_Factory", "Overlay", "LiveAnnouncer", "BreakpointObserver", "ɵprov", "Injectable", "Optional", "SkipSelf", "DIRECTIVES", "MatSnackBarModule", "ɵmod", "OverlayModule", "MatCommonModule", "exports", "ɵinj", "NgModule"]
}
